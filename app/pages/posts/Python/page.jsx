import Cover from "../../../Components/js/Cover"
import TextPost from "../../../Components/js/TextPost"
import AuthorSpeak from "../../../Components/js/AuthorSpeak"

export const metadata = {
    title: "Python",
    description: "Язык програмиорование Python"
  };

export default function Python(){
    return(
        <div>
            <Cover title="Все о Программировании" namePage="Python" image="/allIt.jpg" isShowBtn={false}/>
            <div className="text">
                <q>Python (МФА: [ˈpʌɪθ(ə)n]; в русском языке встречаются названия пито́н или па́йтон ) — мультипарадигмальный высокоуровневый язык программирования общего назначения с динамической строгой типизацией и автоматическим управлением памятью , ориентированный на повышение производительности разработчика, читаемости кода и его качества, а также на обеспечение переносимости написанных на нём программ . Язык является полностью объектно-ориентированным в том плане, что всё является объектами. Необычной особенностью языка является выделение блоков кода отступами . Синтаксис ядра языка минималистичен, за счёт чего на практике редко возникает необходимость обращаться к документации . Сам же язык известен как интерпретируемый и используется в том числе для написания скриптов . Недостатками языка являются зачастую более низкая скорость работы и более высокое потребление памяти написанных на нём программ по сравнению с аналогичным кодом, написанным на компилируемых языках, таких как C или C++.<br/><br/>
                Python является мультипарадигменным языком программирования, поддерживающим императивное, процедурное, структурное, объектно-ориентированное программирование, метапрограммирование, функциональное программирование и асинхронное программирование. Задачи обобщённого программирования решаются за счёт динамической типизации. Аспектно-ориентированное программирование частично поддерживается через декораторы, более полноценная поддержка обеспечивается дополнительными фреймворками. Такие методики как контрактное и логическое программирование можно реализовать с помощью библиотек или расширений . Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений с глобальной блокировкой интерпретатора (GIL)  , высокоуровневые структуры данных. Поддерживается разбиение программ на модули, которые, в свою очередь, могут объединяться в пакеты.<br/><br/>
                Эталонной реализацией Python является интерпретатор CPython, который поддерживает большинство активно используемых платформ  , являющийся стандартом де-факто языка. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. CPython компилирует исходные тексты в высокоуровневый байт-код, который исполняется в стековой виртуальной машине. К другим трём основным реализациям языка относятся Jython (для JVM), IronPython (для CLR/.NET) и PyPy. PyPy написан на подмножестве языка Python (RPython) и разрабатывался как альтернатива CPython с целью повышения скорости исполнения программ, в том числе за счёт использования JIT-компиляции. Поддержка версии Python 2 закончилась в 2020 году. На текущий момент активно развивается версия языка Python 3  . Разработка языка ведётся через предложения по расширению языка PEP (англ. Python Enhancement Proposal), в которых описываются нововведения, делаются корректировки согласно обратной связи от сообщества и документируются итоговые решения.<br/><br/>
                Стандартная библиотека включает большой набор полезных переносимых функций, начиная с возможностей для работы с текстом и заканчивая средствами для написания сетевых приложений. Дополнительные возможности, такие как математическое моделирование, работа с оборудованием, написание веб-приложений или разработка игр, могут реализовываться посредством обширного количества сторонних библиотек, а также интеграцией библиотек, написанных на Си или C++, при этом и сам интерпретатор Python может интегрироваться в проекты, написанные на этих языках . Существует и специализированный репозиторий программного обеспечения, написанного на Python, — PyPI  . Данный репозиторий предоставляет средства для простой установки пакетов в операционную систему и стал стандартом де-факто для Python  . По состоянию на 2019 год в нём содержалось более 175 тысяч пакетов.<br/><br/>

                Python стал одним из самых популярных языков, он используется в анализе данных, машинном обучении, DevOps и веб-разработке, а также в других сферах, включая разработку игр. За счёт читабельности, простого синтаксиса и отсутствия необходимости в компиляции язык хорошо подходит для обучения программированию, позволяя концентрироваться на изучении алгоритмов, концептов и парадигм. Отладка же и экспериментирование в значительной степени облегчаются тем фактом, что язык является интерпретируемым. Применяется язык многими крупными компаниями, такими как Google или Facebook.</q>
                <br/>
                <br/>
                <h2>История</h2>
                <p>Задумка по реализации языка появилась в конце 1980-х годов, а разработка его реализации началась в 1989 году сотрудником голландского института CWI Гвидо ван Россумом  . Для распределённой операционной системы Amoeba требовался расширяемый скриптовый язык, и Гвидо начал разрабатывать Python на досуге, позаимствовав некоторые наработки для языка ABC (Гвидо участвовал в разработке этого языка, ориентированного на обучение программированию). В феврале 1991 года Гвидо опубликовал исходный текст в группе новостей alt.sources  . С самого начала Python проектировался как объектно-ориентированный язык.<br/><br/>

                Гвидо ван Россум назвал язык в честь популярного британского комедийного телешоу 1970-х «Летающий цирк Монти Пайтона»  , поскольку автор был поклонником этого телешоу, как и многие другие разработчики того времени, а в самом шоу прослеживалась некая параллель с миром компьютерной техники.<br/><br/>

                Наличие дружелюбного, отзывчивого сообщества пользователей считается, наряду с дизайнерской интуицией Гвидо, одним из факторов успеха Python. Развитие языка происходит согласно чётко регламентированному процессу создания, обсуждения, отбора и реализации документов PEP (англ. Python Enhancement Proposal) — предложений по развитию Python. <br/><br/>

                3 декабря 2008 года  , после длительного тестирования, вышла первая версия Python 3000 (или Python 3.0, также используется сокращение Py3k). В Python 3 устранены многие недостатки архитектуры с максимально возможным (но не полным) сохранением совместимости со старыми версиями Python.<br/><br/>

                Дата окончания срока поддержки Python 2.7 первоначально была установлена на 2015 год, а затем перенесена на 2020 год из опасения, что большая часть существующего кода не может быть легко перенесена на Python 3. Поддержка Python 2 была направлена лишь на уже существующие проекты, новые проекты должны были использовать Python 3. Официально Python 2.7 не поддерживается с 1 января 2020 года, хотя последнее обновление вышло в апреле 2020. Больше никаких исправлений безопасности или других улучшений для Python 2.7 не будет выпущено. С окончанием срока службы Python 2.x поддерживаются только Python 3.6.x и более поздние версии.</p>
                <br/>
                <br/>
                <h2>Концепция и философия</h2>
                <p>Язык использует динамическую типизацию вместе с подсчётом ссылок и циклический сборщик мусора для менеджмента памяти. Также есть динамические разрешения имён (динамическое связывание), которые связывают имена методов и переменных во время выполнения программы.<br/><br/>

                Python предлагает поддержку функционального программирования в традициях Лиспа. Так, в Python есть функции filter, map и reduce (Начиная с python 3, находится в библиотеке itertools ; также из Лиспа были заимствованы понятия характеристик списков, ассоциативных массивов (словарей), множеств и генераторов списков. Стандартная библиотека содержит два модуля (itertools и functools), реализующих инструменты, заимствованные из Haskell и Standard ML.<br/><br/>

                Разработчики языка Python придерживаются определённой философии программирования, называемой «The Zen of Python» («Дзен Пито́на», или «Дзен Па́йтона»). Её текст выдаётся интерпретатором Python по команде import this (работает один раз за сессию). Автором этой философии считается Тим Петерс (Tim Peters).<br/><br/>
                Вместо того, чтобы встроить в ядро Python всю функциональность языка, он был спроектирован таким образом, чтобы быть легко расширяемым. Это сделало язык популярным средством добавления программируемых интерфейсов к существующим приложениям. Видение Гвидо ван Россума маленького ядра с большой стандартной библиотекой и легко расширяемым интерпретатором проистекало из негативного опыта разработки языка ABC, который придерживался противоположного подхода.

                Python стремится к более простому, менее громоздкому синтаксису и грамматике, предоставляя разработчикам выбор в их методологии кодирования. В отличие от девиза Perl «есть несколько способов сделать это», Python придерживается философии «должен существовать один — и, желательно, только один — очевидный способ сделать это». Алекс Мартелли, член Python Software Foundation и автор книг по Python пишет, что «Описывать что-то как „умное“ не считается комплиментом в культуре Python».

                Разработчики Python стремятся избежать преждевременной оптимизации и отвергают патчи к некритическим частям эталонной реализации CPython, которые могли бы предложить незначительное увеличение скорости за счёт понятности кода. Однако есть способы повышения производительности. Если в программе есть узкие места, связанные с выполнением ресурсоёмких операций на центральном процессоре, но не связанные с использованием операций ввода-вывода, то повысить производительность возможно за счёт трансляции программы при помощи Cython в язык Си и последующей компиляции. Требовательные к вычислительным ресурсам части программы также можно переписывать на языке Си и подключать как отдельные библиотеки с привязками к Python.

                Важная цель разработчиков Python — делать его забавным для использования. Это было отражено в названии языка, данном в честь Монти Пайтона. Также это отражено в иногда игривом подходе к обучающим программам и справочным материалам, таким как примеры программ из документаций, которые используют названия spam и eggs вместо использующихся в документации множества других языков foo и bar.</p>
                <br/>
                <br/>
                <h2>Портируемость</h2>
                <p>Python портирован и работает почти на всех известных платформах — от КПК до мейнфреймов. Существуют порты под Microsoft Windows, практически под все варианты UNIX (включая FreeBSD и Linux), Android, Plan 9, Mac OS и macOS, iPhone OS (iOS) 2.0 и выше, iPadOS, Palm OS, OS/2, Amiga, HaikuOS, AS/400, OS/390, Windows Mobile и Symbian.<br/><br/>

                По мере устаревания платформы её поддержка в основной ветви языка прекращается. Например, с версии 2.6 прекращена поддержка Windows 95, Windows 98 и Windows ME. В версии 3.5 перестала поддерживаться Windows XP В версии 3.9 перестала поддерживаться Windows Vista и Windows 7.<br/><br/>

                При этом, в отличие от многих портируемых систем, для всех основных платформ Python имеет поддержку характерных для данной платформы технологий (например, Microsoft COM/DCOM). Более того, существует специальная версия Python для виртуальной машины Java — Jython, что позволяет интерпретатору выполняться на любой системе, поддерживающей Java, при этом классы Java могут непосредственно использоваться из Python и даже быть написанными на Python. Также несколько проектов обеспечивают интеграцию с платформой Microsoft.NET, основные из которых — IronPython и Python.NET.</p>
                <br/>
                <br/>
                <h2>Типы и структуры данных</h2>
                <p>Python поддерживает динамическую типизацию, то есть тип переменной определяется только во время исполнения. Поэтому вместо «присваивания значения переменной» лучше говорить о «связывании значения с некоторым именем». Также Python поддерживает подсказки типов с помощью аннотаций, добавляющие поддержку последовательной типизации и позволяющие использовать статический анализ кода. Подсказки типов не используются во время компиляции и исполнения кода непосредственно CPython, но могут использоваться некоторыми библиотеками, например, FastAPI. К примитивным типам в Python относятся булевый, целое число произвольной длины, число с плавающей запятой и комплексное число. Из контейнерных типов в Python встроены: строка, список, кортеж, словарь и множество. Все значения являются объектами, в том числе функции, методы, модули, классы.<br/><br/>

                Добавить новый тип можно либо написав класс (class), либо определив новый тип в модуле расширения (например, написанном на языке C). Система классов поддерживает наследование (одиночное и множественное) и метапрограммирование. Возможно наследование от большинства встроенных типов и типов расширений.</p>
                <br/>
                <h3 className="center">Типы, используемые в Python</h3>
                <table>
                    <tr>
                        <th>Тип</th>
                        <th>Изменяемость</th>
                        <th>Описание</th>
                        <th>Примеры</th>
                    </tr>
                    <tr>
                        <td><div className="code-mini">bool</div></td>
                        <td>Неизменяемый</td>
                        <td className="text-hy">Логический тип</td>
                        <td><div  className="code-mini">True</div><div className="code-mini">False</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">bytearray</div></td>
                        <td>Изменяемый</td>
                        <td className="text-hy">Массив байтов</td>
                        <td><div className="code-big-mini">bytearray(b'Some ASCII')<br/>
                                                bytearray(b"Some ASCII")<br/>
                                                bytearray([119, 105, 107, 105])</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">bytes</div></td>
                        <td>Неизменяемый</td>
                        <td className="text-hy">Массив байтов</td>
                        <td><div className="code-big-mini">b'Some ASCII'<br/>
                                                        b"Some ASCII"<br/>
                                                        bytes([119, 105, 107, 105])</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">complex</div></td>
                        <td>Неизменяемый</td>
                        <td className="text-hy">Комплексное число</td>
                        <td><div className="code-mini">3+2.7j</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">dict</div></td>
                        <td>Изменяемый</td>
                        <td className="text-hy">Словарь (ассоциативный массив), представляет собой коллекцию пар «ключ—значение»; значение может быть любого типа, ключ должен иметь хешируемый тип</td>
                        <td><div className="code-big-mini">
                            {"{"}'key1': 1.0, 3: False{"}"}<br/>
                            {"{}"}
                        </div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">types.EllipsisType</div></td>
                        <td>Неизменяемый</td>
                        <td className="text-hy">Многоточие (эллипсис). Используется в основном в NumPy для сокращённого задания среза многомерного массива. В самом Python присутствует для поддержки пользовательских типов и таких расширений, как NumPy</td>
                        <td><div className="code-big-mini">...<br/>
                            Ellipsis<br/>
                            Для NumPy:<br/>
                            x[i, ..., j],<br/>
                            что эквивалентно<br/>
                            x[i, :, :, j]</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">float</div></td>
                        <td>Неизменяемый</td>
                        <td className="text-hy">Число с плавающей запятой. Степень точности зависит от платформы, но на практике обычно реализуется в виде 64-битного 53-разрядного числа</td>
                        <td><div className="code-mini">1.414</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">frozenset</div></td>
                        <td>Неизменяемый</td>
                        <td className="text-hy">Неупорядочное множество, не содержит дубликатов; может содержать внутри себя различные хешируемые типы данных</td>
                        <td><div className="code-mini">frozenset([4.0, 'string', True])</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">int</div></td>
                        <td>Неизменяемый</td>
                        <td className="text-hy"></td>
                        <td><div className="code-mini">42</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">list</div></td>
                        <td>Изменяемый</td>
                        <td className="text-hy">Список, может содержать внутри себя различные типы данных</td>
                        <td><div className="code-big-mini">[4.0, 'string', True]<br/>
                        []</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">NoneType</div></td>
                        <td>Неизменяемый</td>
                        <td className="text-hy">Объект, представляющий собой отсутствие значения, часто называемый Null в других языках</td>
                        <td><div className="code-mini">None</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">NotImplementedType</div></td>
                        <td>Неизменяемый</td>
                        <td className="text-hy">Объект, который возвращается при перегрузке операторов, когда типы операндов не поддерживаются.</td>
                        <td><div className="code-mini">NotImplemented</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">range</div></td>
                        <td>Неизменяемый</td>
                        <td className="text-hy">Последовательность целых чисел от какого-то одного значения до другого, обычно используется для повторения операции несколько раз при помощи for</td>
                        <td><div className="code-big-mini">range(1, 10)<br/>
                        range(10, -5, -2)</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">set</div></td>
                        <td>Изменяемый</td>
                        <td className="text-hy">Неупорядочное множество, не содержит дубликатов; может содержать внутри себя различные хешируемые типы данных</td>
                        <td><div className="code-big-mini">{"{"}4.0, 'string', True{"}"}<br/>
                        set()</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">str</div></td>
                        <td>Неизменяемый</td>
                        <td>Строковый тип</td>
                        <td><div className="code-big-mini">'Все о Программировании'<br/>
                                    "Все о Программировании"<br/>
                                    """Spanning<br/>
                                    multiple<br/>
                                    lines"""</div></td>
                    </tr>
                    <tr>
                        <td><div className="code-mini">tuple</div></td>
                        <td>Неизменяемый</td>
                        <td className="text-hy">Кортеж. Может содержать внутри себя различные типы данных. Может использоваться в качестве неизменяемого списка и в качестве записей с неименованными полями</td>
                        <td>
                            В качестве неизменяемого списка:<br/>
                            <div className="code-big-mini">
                                (4.0, 'string', True)<br/>
                                ('single element',)<br/>
                                ()<br/>
                            </div>
                            <br/>
                            В качестве записей:
                            <div className="code-big-mini">
                            lax_coordinates = (33.9425, -118.408056)<br/>
                            city, year, pop, chg, area = ('Tokyo', 2003, 32450, 0.66, 8014)
                            </div>
                        </td>
                    </tr>
                </table>
                <br/>
                <br/>
                <h2>Синтаксис и семантика</h2>
                <h3>Операторы</h3>
                <p>Набор операторов достаточно традиционен.<br/>

                Условный оператор<span className="code-mini">if</span> (если). При наличии нескольких условий и альтернатив применяется необязательный блок <span className="code-mini">elif</span> (сокращение от <span className="code-mini">else if</span>), который может повторяться в коде неограниченное число раз. Если ни одно из условий не было соблюдено, то выполняется необязательный блок <span className="code-mini">else</span> (иначе).<br/>
                Оператор цикла <span className="code-mini">while</span>.<br/>
                Оператор итерации <span className="code-mini">for</span>.<br/>
                Операторы обработки исключений <span className="code-mini">try — except — else — finally</span>.<br/>
                Оператор определения класса <span className="code-mini">class</span><p>.<br/>
                Оператор определения функции, метода или генератора </p><span className="code-mini">def</span>. Внутри возможно применение <span className="code-mini">return</span> (возврат) для возврата из функции или метода, а в случае генератора — <span className="code-mini">yield</span> (давать).<br/>
                Оператор сопоставления с образцом (начиная с Python 3.10) <span className="code-mini">match — case</span>.<br/>
                Операторы вызова исключений <span className="code-mini">raise</span> и <span className="code-mini">assert</span>.<br/>
                Оператор <span className="code-mini">pass</span> ничего не делает. Используется для пустых блоков кода</p>
                <br/>
                <h3>Система отступов</h3>
                <p>Одной из интересных синтаксических особенностей языка является выделение блоков кода с помощью отступов (пробелов или табуляций), поэтому в Python отсутствуют операторные скобки begin/end, как в языке Паскаль, или фигурные скобки, как в Си. Такой «трюк» позволяет сократить количество строк и символов в программе и приучает к «хорошему» стилю программирования. С другой стороны, поведение и даже корректность программы может зависеть от начальных пробелов в тексте. Тем, кто привык программировать на языках с явным выделением начала и конца блоков, такое поведение поначалу может показаться неинтуитивным и неудобным.</p>
                <AuthorSpeak isLang={true} author="Сам Гвидо писал:" eng="Perhaps Python's most controversial feature is its use of indentation for statement grouping, which derives directly from ABC. It is one of the language's features that is dearest to my heart. It makes Python code more readable in two ways. First, the use of indentation reduces visual clutter and makes programs shorter, thus reducing the attention span needed to take in a basic unit of code. Second, it allows the programmer less freedom in formatting, thereby enabling a more uniform style, which makes it easier to read someone else's code. (Compare, for instance, the three or four different conventions for the placement of braces in C, each with strong proponents.)" rus="Наверное, самой спорной особенностью Python является использование отступов для группировки операторов, что взято непосредственно из ABC. Это одна из особенностей языка, которая дорога моему сердцу. Это делает код Python более читабельным двумя способами. Во-первых, использование отступов уменьшает визуальное нагромождение и делает программы короче, тем самым сокращая объём внимания, необходимого для восприятия базовой единицы кода. Во-вторых, это даёт программисту меньше свободы в форматировании, тем самым делая возможным более единообразный стиль, что облегчает чтение чужого кода. (Сравните, например, три или четыре различных соглашения о размещении фигурных скобок в Си, каждое из которых имеет сильных сторонников)."/>
                <br/>
                <h3>Выражения</h3>
                <p>Состав, синтаксис, ассоциативность и приоритет операций достаточно привычны для языков программирования и призваны минимизировать употребление скобок. Если сравнивать с математикой, то приоритеты операторов зеркалируют соответствующие в математике, при этом оператор присвоения значения = соответствует типографскому ←. Хотя приоритеты операций позволяют не использовать скобки во многих случаях, на анализ больших выражений может тратиться лишнее время, в результате чего в таких случаях выгоднее явно расставлять скобки.<br/><br/>
                Отдельно стоит упомянуть операцию форматирования для строк (работает по аналогии с функцией printf() из Си), которая использует тот же символ, что и взятие остатка от деления:<br/></p>
                <div className="code">
                    str_var = "Aleykum!"<br/>
                    print("Assalamu %s" % str_var)
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        Assalamu Aleykum!
                    </div>
                </div>
                <br/>
                <p>В версии 3.6 были добавлены форматированные строковые литералы, или f-строки, которые делают код более читаемым и лаконичным:</p>
                <br/>
                <div className="code"> 
                    str_var = "Aleykum!"<br/>
                    print(f"Assalamu {"{str_var}"}") # вывод с использованием f-строки
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        Assalamu Aleykum!
                    </div>
                </div>
                <br/>
                <p>Python имеет удобные цепочечные сравнения:</p>
                <br/>
                <span className="code-mini">1 {"<="} a {"<"} 10 and 1 {"<="} b {"<"} 20</span>
                <br/>
                <p>Кроме того, логические операции (<span className="code-mini">or</span> и <span className="code-mini">and</span>) являются ленивыми: если для вычисления значения операции достаточно первого операнда, этот операнд и является результатом, в противном случае вычисляется второй операнд логической операции. Это основывается на свойствах алгебры логики: например, если один аргумент операции «ИЛИ» (<span className="code-mini">or</span>) является истиной, то и результат этой операции всегда является истиной. В случае, если второй операнд является сложным выражением, это позволяет сократить издержки на его вычисление. Этот факт широко использовался до версии 2.5 вместо условной конструкции:</p>
                <br/>
                <div className="code-big-mini">a {"<"} b and "меньше" or "больше или равно"</div>
                <br/>
                <p>Встроенные типы данных, как правило, имеют особый синтаксис для своих литералов (записанных в исходном коде констант):</p>
                <br/>
                <div className="code">
                    "строка и Юникод-строка одновременно"<br/>
                    'строка и Юникод-строка одновременно'<br/>
                    """тоже строка и Юникод-строка одновременно"""<br/>
                    True or False  # булевы литералы<br/>
                    3.14  # число с плавающей запятой<br/>
                    0b1010 + 0o12 + 0xA  # числа в двоичной, восьмеричной и шестнадцатеричной системах счисления<br/>
                    1 + 2j  # комплексное число<br/>
                    [1, 2, "a"]  # список<br/>
                    (1, 2, "a")  # кортеж<br/>
                    {"{"}'a': 1, 'b': 'B'{"}"}  # словарь<br/>
                    {"{"}'a', 6, 8.8{"}"} # множество<br/>
                    lambda x: x**2  # анонимная функция<br/>
                    (i for i in range(10)) # генератор
                </div>
                <br/>
                <p>писков (и других последовательностей) Python предлагает набор операций над срезами. Особенностью является индексация, которая может показаться новичку странной, но раскрывает свою согласованность по мере использования. Индексы элементов списка начинаются с нуля. Запись среза <span className="code-mini">s[N:M]</span> означает, что в срез попадают все элементы от N включительно до M, не включая. При этом индекс можно не указывать. Например, запись <span className="code-mini">s[:M]</span> означает, что в срез попадают все элементы с самого начала; запись <span className="code-mini">s[N:]</span> означает, что попадают все элементы до конца среза; запись <span className="code-mini">s[:]</span> означает, что попадают все элементы с начала и до конца.</p>
                <br/>
                <h3>Имена</h3>
                <p>Имя (идентификатор) может начинаться с буквы любого алфавита в Юникоде любого регистра или подчёркивания, после чего в имени можно использовать и цифры. В качестве имени нельзя использовать ключевые слова (их список можно узнать по <span className="code-mini">import keyword; print(keyword.kwlist)</span>) и нежелательно переопределять встроенные имена. Имена, начинающиеся с символа подчёркивания, имеют специальное значение.<br/><br/>

                В каждой точке программы интерпретатор имеет доступ к трём пространствам имён (то есть отображениям имён в объекты): локальному, глобальному и встроенному.<br/><br/>

                Области видимости имён могут быть вложенными друг в друга (внутри определяемой функции видны имена из окружающего блока кода). На практике с областями видимости и связыванием имён связано несколько правил «хорошего тона», о которых можно подробнее узнать из документации.</p>
                <br/>
                <h3>Строки документации</h3>
                <p>Python предлагает механизм документирования кода <span className="code-mini">pydoc</span>. В начало каждого модуля, класса, функции вставляется строка документации — <span className="code-mini">docstring</span>. Строки документации остаются в коде на момент времени исполнения, и в язык встроен доступ к документации(переменная <span className="code-mini">__doc__</span>), что используется современными IDE (Интегрированная среда разработки) (например, Eclipse).<br/><br/>

                В интерактивном режиме можно получить помощь, сгенерировать гипертекстовую документацию по целому модулю или даже применить <span className="code-mini">doctest</span> для автоматического тестирования модуля.</p>
                <br/>
                <br/>
                <h2>Парадигмы программирования</h2>
                <p>Python — мультипарадигменный язык программирования. Полностью поддерживаются объектно-ориентированное, структурное, обобщённое, функциональное программирование и метапрограммирование. Базовая поддержка аспектно-ориентированного программирования реализуется за счёт метапрограммирования. Множество других методик, в том числе контрактное и логическое программирование можно реализовать с помощью расширений.</p>
                <br/>
                <h3>Объектно-ориентированное программирование</h3>
                <p>Дизайн языка Python построен вокруг объектно-ориентированной модели программирования. Реализация ООП в Python является хорошо продуманной, но вместе с тем достаточно специфической по сравнению с другими объектно-ориентированными языками. В языке всё является объектами — либо экземплярами классов, либо экземплярами метаклассов. Исключением является базовый встроенный метакласс <span className="code-mini">type</span>. Таким образом, классы на самом деле являются экземплярами метаклассов, а производные метаклассы являются экземплярами метакласса <span className="code-mini">type</span>. Метаклассы являются частью концепции метапрограммирования и предоставляют возможность управления наследованием классов, что позволяет создавать абстрактные классы, регистрировать классы или добавлять в них какой-либо программный интерфейс в рамках библиотеки или фреймворка.<br/><br/>

                Классы по своей сути представляют план или описание того, как создать объект, и хранят в себе описание атрибутов объекта и методов для работы с ним. Парадигма ООП основывается на инкапсуляции, наследовании и полиморфизме. Инкапсуляция в Python представлена возможностью хранения публичных и скрытых атрибутов (полей) в объекте с предоставлением методов для работы с ними, при этом на самом деле все атрибуты являются публичными, но для пометки скрытых атрибутов существует соглашение об именовании. Наследование позволяет создавать производные объекты без необходимости повторного написания кода, а полиморфизм заключается в возможности переопределения любых методов объекта (в Python все методы являются виртуальными), а также в перегрузке методов и операторов. Перегрузка методов в Python реализуется за счёт возможности вызова одного и того же метода с разным набором аргументов. Особенностью Python является возможность модифицировать классы после их объявления, добавляя в них новые атрибуты и методы, также можно модифицировать и сами объекты, в результате чего классы могут использоваться как структуры для хранения произвольных данных.<br/><br/>

                В Python поддерживается множественное наследование. Само по себе множественное наследование является сложным, и его реализации сталкиваются с проблемами разрешения коллизий имён между родительскими классами и с возможным повторным наследованием от одного и того же класса в иерархии. В Python методы вызываются согласно порядку разрешения методов (MRO), который основан на алгоритме C3-линеаризации, в обычных случаях при написании программ не требуется знать принцип работы данного алгоритма, понимание же может потребоваться при создании нетривиальных иерархий классов.<br/><br/>

                Возможности и особенности, специфичные для Python:</p>
                <br/>
                <ul>
                    <li>Специальные методы, управляющие жизненным циклом объекта: конструкторы, деструкторы.</li>
                    <li>Перегрузка операторов (всех, кроме <span className="code-mini">is, '.', '='</span> и символьных логических).</li>
                    <li>Свойства (имитация поля с помощью функций).</li>
                    <li>Управление доступом к полям (эмуляция полей и методов, частичный доступ, и т. п.).</li>
                    <li>Методы для управления наиболее распространёнными операциями (истинностное значение, <span className="code-mini">len()</span>, глубокое копирование, сериализация, итерация по объекту, …).</li>
                    <li>Полная интроспекция.</li>
                    <li>Классовые и статические методы, классовые поля.</li>
                    <li>Классы, вложенные в функции и классы.</li>
                    <li>Возможность модифицировать объекты во время исполнения программы.</li>
                </ul>
                <br/>
                <h3>Обобщённое программирование</h3>
                <p>Языки с поддержкой динамической типизации и объектно-ориентированного программирования обычно не рассматриваются в рамках обобщённого программирования, поскольку задачи обобщённого программирования решаются за счёт отсутствия ограничений на типы данных. В Python обобщённое программирование со строгой типизацией достигается использованием средств языка совместно со внешними анализаторами кода, такими как Mypy.</p>
                <br/>
                <h3>Функциональное программирование</h3>
                <p>Несмотря на то, что Python изначально не задумывался как язык функционального программирования, он поддерживает функциональный стиль программирования, в частности:</p>
                <br/>
                <ul>
                    <li>функция является объектом первого класса,</li>
                    <li>функции высших порядков,</li>
                    <li>рекурсия,</li>
                    <li>фокус на работу со списками,</li>
                    <li>аналог замыканий,</li>
                    <li>частичное применение функции с помощью метода <span className="code-mini">partial()</span>,</li>
                    <li>возможность реализации других средств на самом языке (например, карринг).</li>
                </ul>
                <br/>
                <p>Однако, в отличие от большинства языков, непосредственно ориентированных на функциональное программирование, Python не является чистым языком программирования и код не защищён от побочных эффектов.<br/><br/>
                    
                    В стандартной библиотеке Python существуют специальные пакеты<span className="code-mini">operator</span>  и <span className="code-mini">functools</span> для функционального программирования.</p>
                <br/>
                <h3>Асинхронное программирование</h3>
                <p>Python, начиная с 3.5, стал поддерживать асинхронное программирование. Появились операторы async и await, а также библиотека asyncio</p>
                <br/>
                <div className="code">import asyncio<br/><br/>

                                async def main():<br/>
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('Python ...')<br/>
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await asyncio.sleep(1)<br/>
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('... Language PC')<br/><br/>

                                asyncio.run(main())
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                            Python ...
                            <br/>
                            ... Language PC
                    </div>                    
                </div>
                <br/>
                <p><span className="code-mini">async</span> является атрибутом, который создает асинхронную функцию</p>
                <br/>
                <p><span className="code-mini">await</span> позволяет выполнять асинхронные генераторы</p>
                <br/>
                <br/>
                <h2>Возможности</h2>
                <h3>Модули и пакеты</h3>
                <p>Программное обеспечение (приложение или библиотека) на Python оформляется в виде модулей, которые в свою очередь могут быть собраны в пакеты. Модули могут располагаться как в каталогах, так и в ZIP-архивах. Модули могут быть двух типов по своему происхождению: модули, написанные на «чистом» Python, и модули расширения (extension modules), написанные на других языках программирования. Например, в стандартной библиотеке есть «чистый» модуль pickle и его аналог на Си: cPickle. Модуль оформляется в виде отдельного файла, а пакет — в виде отдельного каталога. Подключение модуля к программе осуществляется оператором <span className="code-mini">import</span> После импорта модуль представлен отдельным объектом, дающим доступ к пространству имён модуля. В ходе выполнения программы модуль можно перезагрузить функцией <span className="code-mini">reload()</span></p>
                <br/>
                <h3>Интроспекция</h3>
                <p>Python поддерживает полную интроспекцию времени исполнени. Это означает, что для любого объекта можно получить всю информацию о его внутренней структуре.<br/><br/>

                Применение интроспекции является важной частью того, что называют Pythonic style, и широко применяется в библиотеках и фреймворках Python, таких как PLY, Cherry, Django и др., значительно экономя время использующего их программиста.<br/><br/>

                Необходимые для интроспекции данные хранятся в специальных атрибутах. Так, например, получить все пользовательские атрибуты большинства объектов можно из специального атрибута — словаря (или другого объекта, предоставляющего интерфейс <span className="code-mini">dict</span>) <span className="code-mini"> __dict__</span></p>
                <br/>
                <div className="code">
                class x(object):<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/><br/>
                f = x()<br/>
                f.attr = 12<br/>
                print(f.__dict__)<br/>
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                    {"{"}'attr': 12{"}"}
                    </div>
                </div>
                <br/>
                <div className="code-big-mini">
                    print(x.__dict__)
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        {"{"}'__dict__': {"<attribute"} '__dict__' of 'x' objects{">"}, '__module__'.......
                    </div>
                </div>
                <br/>
                <p>Есть также другие атрибуты, имена и назначение которых зависят от объекта:</p>
                <br/>
                <div className="code">
                def f():<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
                f.func_code.co_code
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                    'd\x00\x00S'
                    </div>
                </div>
                <br/>
                <div className="code-big-mini">f.__class__</div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        {"<type 'function'>"}
                    </div>
                </div>
                <br/>
                <p>одавляющее большинство атрибутов, поддерживающих интроспекцию, является классовым, и их, в свою очередь, можно получить из <span className="code-mini">obj.__class__.__dict__</span>. Часть информации, унаследованную от базового класса, все объекты используют совместно, что позволяет экономить память.<br/><br/>

                Для удобства получения интроспективной информации в Python есть модуль <span className="code-mini">inspect</span></p>
                <br/>
                <div className="code">
                    def f(x,y = 10,**mp):<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
                    inspect.getargspec(f)
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        (['x', 'y'], None, 'mp', (10,))
                    </div>
                </div>
                <br/>
                <p>С помощью модуля <span className="code-mini">new</span> возможен обратный процесс — построения объекта из составных частей на этапе исполнения</p>
                <br/>
                <div className="code">
                    def f(i): <br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return j + i<br/>
                    j = 2<br/>
                    f(1)
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Treminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        3
                    </div>
                </div>
                <br/>
                <div className="code">
                import new<br/>
                g = new.function(f.func_code, {"{'j': 23}"})<br/>
                g(1)
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        24
                    </div>
                </div>
                <br/>
                <h3>Обработка исключений</h3>
                <p>Обработка исключений поддерживается в Python посредством операторов <span className="code-mini">try, except, else, finally, raise</span>, образующих блок обработки исключения. В общем случае блок выглядит следующим образом:</p>
                <br/>
                <div className="code">
                try:<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Здесь код, который может вызвать исключение<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise Exception("message")  # Exception, это один из стандартных типов исключения (всего лишь класс),<br/>
                                           # может использоваться любой другой, в том числе свой
               except (Тип исключения1, Тип исключения2, …) as Переменная:<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Код в блоке выполняется, если тип исключения совпадает с одним из типов<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# (Тип исключения1, Тип исключения2, …) или является наследником одного<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# из этих типов.<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Полученное исключение доступно в необязательной Переменной.<br/>
               except (Тип исключения3, Тип исключения4, …) as Переменная:<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Количество блоков except не ограничено<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise  # Сгенерировать исключение "поверх" полученного; без параметров - повторно сгенерировать полученное<br/>
               except:<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Будет выполнено при любом исключении, не обработанном типизированными блоками except<br/>
               else:<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Код блока выполняется, если не было поймано исключений.<br/>
               finally:<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Будет исполнено в любом случае, возможно после соответствующего<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# блока except или else<br/>
                </div>
                <br/>
                <p>Совместное использование <span className="code-mini">else, except</span> и <span className="code-mini">finally</span> стало возможно только начиная с Python 2.5. Информация о текущем исключении всегда доступна через <span className="code-mini">sys.exc_info()</span>. Кроме значения исключения, Python также сохраняет состояние стека вплоть до точки возбуждения исключения — так называемый traceback.<br/><br/>

                В отличие от компилируемых языков программирования, в Python использование исключения не приводит к значительным накладным расходам (а зачастую даже позволяет ускорить исполнение программ) и очень широко используется. Исключения согласуются с философией Python (10-й пункт «дзена Python» — «Ошибки никогда не должны умалчиваться») и являются одним из средств поддержки «утиной типизации».<br/><br/>

                Иногда вместо явной обработки исключений удобнее использовать блок <span className="code-mini">with</span> (доступен, начиная с Python 2.5).</p>
                <br/>
                <h3>Итераторы</h3>
                <p>В программах на Python широко используются итераторы. Цикл <span className="code-mini">for</span> может работать как с последовательностью, так и с итератором. Большинство коллекций предоставляют итераторы, итераторы могут также определяться пользователем для собственных объектов. Модуль<span className="code-mini">itertools</span> стандартной библиотеки содержит средства работы с итераторами.</p>
                <br/>
                <h3>Генераторы</h3>
                <p>Одной из интересных возможностей языка являются генераторы — функции, сохраняющие внутреннее состояние: значения локальных переменных и текущую инструкцию (см. также: сопрограммы). Генераторы могут использоваться как итераторы для структур данных и для ленивых вычислений.<br/><br/>

                При вызове генератора функция немедленно возвращает объект-итератор, который хранит текущую точку исполнения и состояние локальных переменных функции. При запросе следующего значения (посредством метода <span className="code-mini">next()</span>, неявно вызываемого в цикле <span className="code-mini">for</span>) генератор продолжает исполнение функции от предыдущей точки остановки до следующего оператора <span className="code-mini">yield</span> или <span className="code-mini">return</span></p>
                <br/>
                <br/>
                <p>В Python 2.4 появились генераторные выражения — выражения, дающие в результате генератор. Генераторные выражения позволяют сэкономить память там, где иначе требовалось бы использовать список с промежуточными результатами:</p>
                <br/>
                <div className="code-big-mini">sum(i for i in range(1, 100) if i % 2 != 0)</div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">2500</div>
                </div>
                <br/>
                <p>В этом примере суммируются все нечётные числа от 1 до 99.<br/><br/>

                Начиная с версии 2.5, Python поддерживает полноценные сопроцедуры: теперь в генератор можно передавать значения с помощью метода </p><span className="code-mini">send()</span><p> и возбуждать в его контексте исключения с помощью метода <span className="code-mini">throw()</span></p>
                <br/><br/>
                <p>Также Python поддерживает вложенные генераторы. Например, для создания двумерного массива нужно разместить генератор списка, являющегося строкой, внутри генератора всех строк: </p>
                <br/>
                <div className="code-big-mini">[[0 for j in range(m)] for i in range(n)]</div>
                <br/>
                <h3>Управление контекстом выполнения</h3>
                <p>В Python 2.5 появились средства для управления контекстом выполнения блока кода — оператор <span className="code-mini">with</span> и модуль <span className="code-mini">contextlib</span>.</p>
                <br/>
                <p>Оператор может применяться в тех случаях, когда до и после некоторых действий должны обязательно выполняться некоторые другие действия, независимо от возбуждённых в блоке исключений или операторов <span className="code-mini">return</span>: файлы должны быть закрыты, ресурсы освобождены, перенаправление стандартного ввода вывода закончено и т. п. Оператор улучшает читаемость кода, а значит, помогает предотвращать ошибки.</p>
                <br/>
                <h3>Декораторы</h3>
                <p>Декораторы функций — вызываемые объекты, которые принимают другую функцию в качестве аргумента. Декораторы функций могут производить операции с функцией и возвращают либо саму функцию, либо другую заменяющую её функцию или вызываемый объект. То есть, если в коде ранее был прописан декоратор, названный decorate, то следующий код:</p>
                <br/>
                <div className="code">
                    @decorate<br/>
                    def target():<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('running target()')
                </div>
                <br/>
                <p>эквивалентен этому:</p>
                <br/>
                <div className="code">
                    def target():<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('running target()')<br/>
                    target = decorate(target)
                </div>
                <br/>
                <p>Это позволяет сократить использование кода.<br/><br/>

                Пример использования декоратора функции:</p>
                <br/>
                <div className="code">
                    def deco(func):<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def inner():<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('running inner()')<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return inner
                </div>
                <br/>
                <div className="code">
                    @deco<br/>
                    def target():<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('running target()')<br/>
                    target()
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">running inner()</div>
                </div>
                <br/>
                <div className="code-big-mini">
                    target
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        {"<function deco.<locals>.inner at 0.10063b598>"}
                    </div>
                </div>
                <br/>
                <p>Существуют декораторы классов.</p>
                <br/>
                <h3>Регулярные выражения</h3>
                <br/>
                <p>Формат регулярных выражений унаследован из Perl с некоторыми отличиями. Для их использования требуется импортировать модуль <span className="code-mini">re</span>, являющийся частью стандартной библиотеки.</p>
                <br/>
                <br/>
                <h2>Стандартная библиотека</h2>
                <p>Богатая стандартная библиотека является одной из привлекательных сторон Python. Здесь имеются средства для работы со многими сетевыми протоколами и форматами Интернета, например, модули для написания HTTP-серверов и клиентов, для разбора и создания почтовых сообщений, для работы с XML и т. п. Набор модулей для работы с операционной системой позволяет писать кросс-платформенные приложения. Существуют модули для работы с регулярными выражениями, текстовыми кодировками, мультимедийными форматами, криптографическими протоколами, архивами, сериализации данных, поддержка юнит-тестирования и др.<br/><br/>

                Если модулей стандартной библиотеки не хватает, то есть возможность использовать другие каналы получения библиотек. Одним из каналов распространения и обновления пакетов для Python является PyPI (англ. Python Package Index).<br/><br/></p>
                <TextPost text="Python поставляется «с батарейками в комплекте». Такую метафору использовали разработчики, чтобы подчеркнуть богатую стандартную библиотеку языка"/>
                <br/>
                <br/>
                <h2>Сторонние библиотеки</h2>
                <p>Здесь перечислены самые популярные библиотеки Python:</p>
                <ul className="list">
                    <li>Искусственный интеллект — TensorFlow</li>
                    <li>Работа с базами данных — Библиотеки для работы с базами данных</li>
                    <li>Математические вычисления — NumPy</li>
                    <li>Веб-приложения — Django</li>
                    <li>Создание игр — Pygame</li>
                    <li>Отправка сетевых запросов — Requests</li>
                    <li>Парсинг HTML-данных с веб-сайтов — BeautifulSoup</li>
                </ul>
                <br/>
                <br/>
                <h2>Примеры программ</h2>
                <p>Программа «Все о Программировании!» может быть написана одной строкой:</p>
                <br/>
                <div className="code">
                    print("Все о Программировании!")
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        Все о Программировании!
                    </div>
                </div>
                <br/>
                <p>Вычисление факториала числа 10 (10!):</p>
                <br/>
                <div className="code">
                    def factorial(n):<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"if n < 0:"}<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise ArithmeticError('Факториал отрицательного числа.')<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f = 1<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in range (2, n + 1):<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f *= i<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return f<br/><br/>

                    print(factorial(10))
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                    3628800
                    </div>
                </div>
                <br/>
                <p>Реализация с помощью рекурсии:</p>
                <br/>
                <div className="code">
                def factorial(n):<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"if n < 0:"}<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise ArithmeticError('Факториал отрицательного числа.')<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if n == 0 or n == 1:<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return factorial(n - 1) * n<br/><br/>

                print(factorial(10))
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                    3628800
                    </div>
                </div>
                <br/>
                <br/>
                <h2>Профилирование и оптимизация кода</h2>
                <p>В стандартной библиотеке Python имеется профайлер (модуль </p><span className="code-mini">profile</span><p>), который можно использовать для сбора статистики о времени работы отдельных функций. Для решения вопроса о том, какой вариант кода работает быстрее, можно использовать модуль </p><span className="code-mini">timeit</span><p>. Производимые в следующей программе измерения позволяют выяснить, какой из вариантов конкатенации строк более эффективен:</p>
                <br/>
                <div className="code">
                    from timeit import Timer<br/><br/>

                    tmp = "Python 3.13.0 (default, Nov 18 2024, 00:08:59) [MSC v.1500 64 bit (Intel)] on win64."<br/><br/>

                    def case1(): # А. инкрементальные конкатенации в цикле<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = ""<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in range(10000):<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s += tmp<br/>

                    def case2(): # Б. через промежуточный список и метод join<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = []<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in range(10000):<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.append(tmp)<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = "".join(s)<br/><br/>

                    def case3(): # В. списковое выражение и метод join<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return "".join([tmp for i in range(10000)])<br/><br/>

                    def case4(): # Г. генераторное выражение и метод join<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return "".join(tmp for i in range(10000))<br/><br/>

                    for v in range(1,5):<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print (Timer("func()","from __main__ import case%s as func" % v).timeit(200))
                </div>
                <br/>
                <p>Как и в любом языке программирования, в Python имеются свои приёмы оптимизации кода. Оптимизировать код можно исходя из различных (часто конкурирующих друг с другом) критериев (увеличение быстродействия, уменьшение объёма требуемой оперативной памяти, компактность исходного кода и т. д.). Чаще всего программы оптимизируют по времени исполнения.<br/><br/>

                Здесь есть несколько очевидных для опытных программистов правил!</p>
                <br/>
                <ul className="list">
                    <li>Не нужно оптимизировать программу, если скорость её выполнения достаточна.</li>
                    <li>Используемый алгоритм имеет определённую временную сложность, поэтому перед оптимизацией кода программы стоит сначала пересмотреть алгоритм.</li>
                    <li>Стоит использовать готовые и отлаженные функции и модули, даже если для этого нужно немного обработать данные. Например, в Python есть встроенная функция <span className="code-mini">sorted()</span>.</li>
                    <li>Профилирование поможет выяснить узкие места. Оптимизацию нужно начинать с них.</li>
                </ul>
                <br/>
                <p>Python имеет следующие особенности и связанные с ними правила оптимизации:</p>
                <ul className="list">
                    <li>Вызов функций является достаточно дорогостоящей операцией, поэтому внутри вложенных циклов нужно стараться избегать вызова функций или, например, переносить цикл в функции. Функция, обрабатывающая последовательность, эффективнее, чем обработка той же последовательности в цикле вызовом функции.</li>
                    <li>Старайтесь вынести из глубоко вложенного цикла всё, что можно вычислить во внешних циклах. Доступ к локальным переменным более быстрый, чем к глобальным или чем доступ к полям.</li>
                    <li>Оптимизатор psyco может помочь ускорить работу модуля программы при условии, что модуль не использует динамических свойств языка Python.</li>
                    <li>В случае, если модуль проводит массированную обработку данных и оптимизация алгоритма и кода не помогает, можно переписать критические участки, скажем, на языке Си или Pyrex.</li>
                </ul>
                <p>Инструмент под названием Pychecker поможет проанализировать исходный код на Python и выдать рекомендации по найденным проблемам (например, неиспользуемые имена, изменение сигнатуры метода при его перегрузке и т. п.). В ходе такого статического анализа исходного кода могут быть выявлены и ошибки. Pylint призван решать близкие задачи, но имеет уклон в сторону проверки стиля кода, поиска кода с запашком.</p>
                <br/>
                <br/>
                <h2>Cравнение с другими языками</h2>
                <p>Выбор языка обычно зависит от решаемых задач, особенностей языков и наличия библиотек, требуемых для решения задачи. Одна и та же задача, написанная на разных языках, может сильно разниться по эффективности исполнения, в том числе различия могут быть и при исполнении в разных операционных системах или при использовании разных компиляторов. В общем случае языки можно поделить на интерпретируемые (скриптовые), компилируемые в промежуточное представление и компилируемые, что влияет на производительность и потребление памяти. Python принято относить к интерпретируемым. Также отдельные языки могут иметь свои сильные стороны, в случае Python выделяется лёгкость в написании программ.</p>
                <br/>
                <h3>C++ и Java</h3>
                <p>Python сравнивается с C++/Java с точки зрения лаконичности, простоты и гибкости Python[101]. Можно сравнить «Все о Программировании»-программы, записанные на каждом из языков.</p>
                <br/>
                <table>
                    <tr>
                        <th>C++</th>
                        <th>Java</th>
                        <th>Python</th>
                    </tr>
                    <tr>
                        <td>
                            <div className="code-big-mini-small">
                                    #include {"<iostream>"}<br/>
                                    {"int main() {"}<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"std::cout << \"Все о Программировании\" <<std::endl;"}<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"return 0;"}<br/>
                                    {"}"}   
                            </div>
                        </td>
                        <td>
                            <div className="code-big-mini-small">
                            {"public class HelloClass {"}<br/>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"public static void main(String[] args) {"}<br/>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Все о Программировании");<br/>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"}"}<br/>
                            {"}"}
                            </div>
                        </td>
                        <td>
                            <div className="code-big-mini-small">
                                print("Все о Программировании")
                            </div>
                        </td>
                    </tr>
                </table>
                <br/>
                <p>Касательно ООП, в Python, в отличие от C++ и Java, отсутствуют модификаторы доступа к полям и методам класса, атрибуты и поля у объектов могут создаваться на лету в ходе исполнения программы, а все методы являются виртуальными. По сравнению с Java Python позволяет также перегружать операторы, что даёт возможность использовать выражения близкие к естественным. В совокупности подход к ООП в Python упрощает программирование, делает код более понятным и одновременно добавляет гибкости языку. С другой стороны, скорость выполнения кода на Python (как и других интерпретируемых языков) значительно ниже, чем скорость выполнения аналогичного кода на C++ и обычно ожидается ниже, чем в Java. Код на C++ получается производительнее Python, при этом занимает больше строк. Согласно исследованиям алгоритмов, применяемых в биоинформатике, Python показал себя более гибким чем C++, а Java оказалась компромиссным решением между производительностью C++ и гибкостью Python.<br/><br/>

                В Java и Python все объекты создаются в куче, в то время как C++ позволяет создавать объекты как в куче, так и на стеке, в зависимости от используемого синтаксиса. На производительность также влияет способ доступа к данным в памяти. В C++ и Java доступ к данным происходит по постоянным смещениям в памяти, в то время как в Python — через хеш-таблицы. Использование указателей в C++ может быть довольно сложным для понимания среди новичков, и овладение навыками правильного использования указателей может занять некоторое время.</p>
                <br/>
                <h3>Go (Golang)</h3>
                <br/>
                <p>Go и Python — кардинально различающиеся языки, тем не менее, они часто сравниваются один с другим из-за общей ниши — бэкэнда веб-приложений. По выражению Джейсона Кинкэйда, Go объединяет «производительность и безопасность компилируемых языков, таких как C++, со скоростью разработки на динамических языках, таких как Python». В какой-то мере это действительно так: Go изначально разработан как строго статически типизированный компилируемый язык, поддерживающий максимум возможностей динамических языков, при котором ещё можно обеспечить эффективную компиляцию и сохранить производительность компилируемых программ. Общими для обоих языков является использование автоматического управления памятью, наличие встроенных динамических коллекций (массивов и словарей), поддержка срезов, развитый механизм модулей, простой и минималистичный синтаксис. Различий гораздо больше, и не всегда можно однозначно указать, в пользу какого из языков они говорят.

                Динамические возможности.
                Если Python является полностью динамическим языком и практически любые элементы программы могут меняться во время исполнения, включая конструирование «на лету» новых типов и модификацию существующих, то Go — статический язык с достаточно ограниченными возможностями рефлексии, работающей только в отношении созданных при разработке типов данных. В некоторой мере заменой динамических возможностей в Go является кодогенерация, обеспечиваемая простотой синтаксиса и наличием необходимых инструментов и системных библиотек. Также в Go 1.18 добавили поддержку средств обобщённого программирования (generics).</p>
                <br/>
                <h3>Perl</h3>
                <p>Оба языка являются интерпретируемыми, компилируются в промежуточное представление, которое затем отправляется на исполнение. В случае Python генерируется промежуточный байт-код, а компилятор Perl генерирует синтаксическое дерево. Управление памятью в обоих языках автоматическое, а сами языки используются как скриптовые и хорошо подходят для написания веб-приложений. Подход в написания кода Python предполагает лучшее понимание листинга программы в ущерб производительности, тогда как в Perl больше свободы в синтаксисе, что может привести к тому что программы на Perl становятся нечитабельны для программистов, не работающих с данным языком.</p>
                <br/>
                <h3>Языки, на которые повлиял Python</h3>
                <p>Python, как весьма популярный язык программирования, повлиял на следующие языки:</p>
                <ul className="list">
                    <li>CoffeeScript имеет синтаксис, вдохновлённый Python.</li>
                    <li>ECMAScript/JavaScript заимствовал итераторы и генераторы из Python.</li>
                    <li>Go, при сильнейших идеологических различиях, заимствовал у динамических языков, таких как Python, встроенные словари, динамические массивы, срезы.</li>
                    <li>Groovy был создан с мотивацией привнести философию Python на Java.</li>
                    <li>Julia была задумана как «такая же пригодная для общего программирования, как и Python».</li>
                    <li>Nim использует систему отступов и аналогичный синтаксис.</li>
                    <li>Ruby — Юкихиро Мацумото, создатель языка, сказал: «Я хотел скриптовый язык, который был бы более мощным, чем Perl, и более объектно-ориентированным, чем Python. Вот почему я решил создать свой собственный язык».</li>
                    <li>Swift во время разработки брал идеи структуры языка из Python, а также из Objective-C, Rust, Haskell, Ruby, C#, CLU.</li>
                </ul>
                <br/>
                <br/>
                <h2>Критика</h2>
                <h3>Низкое быстродействие</h3>
                <p>Классический Python имеет общий со многими другими интерпретируемыми языками недостаток — сравнительно невысокую скорость выполнения программ. В некоторой степени ситуацию улучшает кеширование байт-кода (расширения <span className="code-mini">.pyc</span> и, до версии 3.5, <span className="code-mini">.pyo</span>), которое позволяет интерпретатору не тратить время на синтаксический разбор текста модулей при каждом запуске.<br/><br/>

                Существуют реализации языка Python, вводящие высокопроизводительные виртуальные машины в качестве бэкенда компилятора. Примерами таких реализаций может служить PyPy, базирующийся на RPython, более ранней инициативой является проект Parrot. Ожидается, что использование виртуальной машины типа LLVM приведёт к тем же результатам, что и использование аналогичных подходов для реализаций языка Java, где низкая вычислительная производительность в основном преодолена. Однако нельзя забывать, что динамический характер Python делает неизбежными дополнительные накладные расходы при исполнении программ, что ограничивает производительность Python-систем независимо от применяемых технологий. Вследствие этого для написания критических участков кода используются низкоуровневые языки, интеграция с которыми обеспечивается множеством программ и библиотек.<br/><br/>

                Тем не менее, Python портирован на некоторые относительно малопроизводительные платформы.</p>
                <br/>
                <h3>Синтаксис и семантика</h3>
                <p>Несмотря на то, что одним из заявленных принципов дизайна Python является принцип наименьшего удивления, критики отмечают целый ряд архитектурных решений, которые могут вводить в заблуждение или вызывать недоумение у программистов, привыкших к другим распространённым языкам. В их числе:<br/><br/></p>
                <ul className="list">
                    <li>Отличие в принципе работы оператора присвоения по сравнению со статически-типизированными языками. В Python при присвоении значения копируется ссылка на объект, а не значение. При работе с простыми неизменяемыми типами возникает ощущение изменения значения переменной при присваивании ей значения, однако фактически присваивается ссылка на другое значение, например, при увеличении значения переменной типа <span className="code-mini">int</span> на 1 меняется ссылка, а не увеличивается значение по ссылке. Однако при работе с изменяемыми типами их содержимое можно менять по ссылке, поэтому при присвоении одной переменной ссылки на другую и последующем изменении значения в одной из двух переменных оно изменится в обеих переменных, что хорошо заметно при работе со списками. При этом кортежи хоть и являются неизменяемыми, но могут хранить ссылки на изменяемые объекты, поэтому по факту кортежи тоже можно менять;</li>
                    <li>Отличие в поведении на некоторых типах «сокращённых» операторов, таких как <span className="code-mini">+=</span> и их развёрнутой записи, хотя в большинстве языков «сокращённый» вариант — это просто краткая запись полного, и семантически они абсолютно эквивалентны. Пример с использованием <span className="code-mini">x +=</span>:</li>
                </ul>
                <br/>
                <div className="code">
                    x = [1, 2]<br/>
                    y = x<br/>
                    x += [3, 4]<br/>
                    print("x: " + x)<br/>
                    print("y: " + y)
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        x: [1, 2, 3, 4]<br/>
                        y: [1, 2, 3, 4]
                    </div>
                </div>
                <br/>
                <p>Аналогичный пример с использованием <span className="code-mini">x = x +</span>:</p>
                <br/>
                <div className="code">
                    x = [1, 2]
                    y = x
                    x = x + [3, 4]
                    print("x: " + x)
                    print("y: " + y)
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        x: [1, 2, 3, 4]
                        y: [1, 2]
                    </div>
                </div>
                <br/>
                <ul className="list">
                    <li>Жёсткая трактовка лексической области видимости, подобная используемой в JavaScript: даже если переменная получает значение в последней строке функции, её областью видимости является вся функция.</li>
                    <li>Путаница между полями класса и полями объекта: текущее значение поля класса инициализирует одноимённое поле объекта, но не при создании объекта, а при первой записи значения в данное поле.</li>
                </ul>
                <br/>
                <div className="code">
                    class Colored:<br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color = "red"<br/><br/>

                    obj1 = Colored()<br/>
                    print(obj1.color)        # выводится исходное значение поля КЛАССА<br/>
                    Colored.color = "green"  # изменение поля КЛАССА<br/>
                    print(obj1.color)        # выводится значение поля КЛАССА<br/>
                    obj1.color = "blue"      # изменяется поле ОБЪЕКТА и фиксируется его значение<br/>
                    Colored.color = "yellow" # изменение поля КЛАССА, которое уже не отразится на объекте<br/>
                    print(obj1.color)        # выводится поле ОБЪЕКТА
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>Terminal</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        red<br/>
                        green<br/>
                        blue
                    </div>
                </div>
                <br/>
                <p>В примере выше три раза выводится поле color объекта obj1 класса Colored. При этом пока не выполнена запись в это поле, выводится текущее значение поля класса, и в третий раз — значение поля объекта. Такое сохранение связи между полем объекта и класса до первой перезаписи может стать причиной неожиданного эффекта: если в программе меняется значение поля класса, то все объекты, одноимённые поля которых ещё не перезаписаны, окажутся неявно изменены.</p>
                <ul className="list">
                    <li>Интуитивно трудно предсказуемое поведение параметров со значением-объектом по умолчанию. Если в качестве инициализатора для параметра по умолчанию указать конструктор объекта, это приведёт к созданию статического объекта, ссылка на который и будет передаваться по умолчанию в каждый вызов. Это может повлечь трудно уловимые ошибки.</li>
                </ul>
                <br/>
                <h3>Невозможность модификации встроенных классов</h3>
                <p>По сравнению с Ruby и некоторыми другими языками, в Python отсутствует возможность модифицировать встроенные классы, такие, как <span className="code-mni">int, str, float, list</span> и другие.</p>
                <br/>
                <br/>
                <h2>Специализированные подмножества/расширения Python</h2>
                <p>На основе Python было создано несколько специализированных подмножеств языка, в основном предназначенных для статической компиляции в машинный код. Некоторые из них перечислены ниже.</p>
                <ul className="list">
                    <li>RPython — созданная в рамках проекта PyPy сильно ограниченная реализация Python без динамизма времени исполнения и некоторых других возможностей. Код на RPython можно компилировать во множество других языков/платформ — C, JavaScript, Lisp, .NET, LLVM. На RPython написан интерпретатор PyPy.</li>
                    <li>Cython — ограниченная реализация Python, но несколько меньше, чем RPython. Cython расширен возможностями статической типизации типами из языка C и позволяет свободно смешивать типизированный и не типизированный код. Предназначен для написания модулей расширений, компилируется в код на языке C.</li>
                    <li>Nuitka — Позволяет транслировать весь код Python в код Си или в исполняемые файлы.</li>
                </ul>   
                <br/>
                <br/>
                <h2>Инструменты поддержки программирования</h2>
                <h3>Интерактивный режим</h3>
                <p>Подобно Lisp и Prolog, Python может использоваться в интерактивном режиме, при котором введённые с клавиатуры операторы сразу же выполняются, а результат выводится на экран (REPL). Этот режим удобен как при изучении языка, так и в процессе профессиональной разработки — для быстрого тестирования отдельных фрагментов кода, — так как обеспечивает немедленную обратную связь. Также он позволяет использовать интерпретатор в качестве калькулятора с большим набором функций.</p> 
                <br/>
                <ul className="list">
                    <li>Эталонная реализация Python имеет встроенный интерактивный интерпретатор, работающий в режиме текстового терминала и позволяющий выполнять все основные операции. В интерактивном режиме доступен отладчик pdb и система помощи (вызывается по help()), работающая для всех модулей, классов и функций, которые содержат строки документации:
                        <br/>
                        <div className="code">
                        from math import * # импорт математических функций<br/>
                        help(cos) # помощь по функции cos
                        </div>
                        <br/>
                        <div className="prew-terminal">
                            <nav>
                                <ul>
                                    <li>Terminal</li>
                                    <li className="new"><p>+</p></li>
                                </ul>
                            </nav>
                            <div className="terminal">
                                Help on built-in function cos in module math:<br/><br/>

                                cos(x, /)<br/>
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the cosine of x (measured in radians).
                            </div>
                        </div>
                    </li>
                    <li>IPython — выходящая под BSD-лицензией кросс-платформенная интерактивная оболочка, предоставляющая расширенную интроспекцию и дополнительные команды. В частности, позволяет передавать исполняемому коду на Python результаты выполнения команд системной командной оболочки. Поддерживает подсветку кода и автоматическое дополнение.</li>
                    <li>BPython — расширение стандартной командной оболочки Python с помощью ряда дополнительных модулей. Реализует подсветку синтаксиса, автоматическое дополнение кода с предложением вариантов, автоматическое выравнивание, интеграция с Pastebin, сохранение ввода в файл, восстановление удалённой строки, предложение параметров для функций.</li>
                </ul>
                <br/> 
                <p>Почти все IDE для Python поддерживают REPL для быстрого тестирования.</p>
                <br/>
                <h3>IDE</h3>
                <p>Существует несколько специализированных IDE для разработки на Python.</p>
                <ul className="list">
                    <li>Eric — полнофункциональный редактор Python и IDE, написанный на Python. Он базируется на кросс-платформенном фреймворке Qt, в качестве компонента редактирования используется QScintilla. Eric предоставляет возможности ведения проектов, отладки, профилирования, рефакторинга кода, взаимодействия с популярными системами управления версиями, такими как Subversion и Git. Расширяется через механизм плагинов. Репозиторий плагинов доступен прямо из среды разработки. Распространяется бесплатно, лицензия GNU GPL v3.</li>
                    <li>PyCharm — полнофункциональная IDE для Python от JetBrains, доступна на платформах Windows, macOS и Linux, существует в бесплатном (Community) и платном (Professional) вариантах.</li>
                    <li>Wing IDE — линейка Python-IDE от американской фирмы Wingware, включает три варианта: «Wing 101», «Wing Personal», «Wing Pro», из которых первые два бесплатны, последний — платный. Версия Pro обладает всеми необходимыми средствами для профессиональной разработки, включая поддержку проектов, работу с системами управления версиями, расширенные возможности навигации по коду и анализа кода, рефакторинг, поддержка использования Django. Бесплатные версии предоставляют меньше функций и не выходят за пределы возможностей, доступных в других бесплатных IDE для Python.</li>
                    <li>Spyder — open-source IDE для Python под лицензией MIT, бесплатная, доступна на платформах Windows, Mac OS X и Linux. Особенностью является то, что IDE ориентирована на data science, в ней удобно работать с библиотеками типа SciPy, NumPy, Matplotlib. Spyder поставляется в комплекте с менеджером пакетов Anaconda. В целом обладает качествами стандартной IDE, имеет редактор с подсветкой синтаксиса, автоматическое дополнение кода, обозреватель документации.</li>
                    <li>Thonny — многоплатформенная бесплатная IDE, выпускается под лицензией MIT, поддерживается Институтом информатики Тартуского университета в Эстонии. Позиционируется как «Python IDE для новичков», полностью, включая интерпретатор Python, ставится «из коробки» пользователем без административных прав, сразу после установки может использоваться без дополнительных настроек. Предназначена для обучения, имеет улучшенную визуализацию порядка вычисления выражений и вызова функций, динамическую подсветку синтаксических ошибок, простой менеджер пакетов. Для профессионального применения возможностей недостаточно, например, нет поддержки проектов и интеграции с системами управления версиями.</li>
                    <li>IDLE — Встроенный в Python IDE. Очень простой и малофункциональный.</li>
                </ul>
                <p>Помимо этого, существуют плагины для поддержки программирования на Python для универсальных IDE Eclipse, KDevelop, Visual Studio Code и Microsoft Visual Studio, а также имеется поддержка подсветки синтаксиса, авто дополнения кода и подключения средств отладки и запуска приложений для целого ряда распространённых текстовых редакторов.</p>
                <br/>
                <br/>
                <h2>Применение</h2>
                <p>Python — стабильный и распространённый язык. Он используется во многих проектах и в различных качествах: как основной язык программирования или для создания расширений и интеграции приложений. На Python реализовано большое количество проектов, также он активно используется для создания прототипов будущих программ.<br/><br/>

Python является лёгким в изучении языком, и часто изучается как первый язык, в том числе используется при обучении детей программированию. Как первый язык он хорошо подходит, поскольку программы на нём близки к естественному языку, на котором люди привыкли думать, а для написания корректной программы требуется минимальное количество ключевых слов. В других же языках, таких как C++, существует большое количество различных синтаксических конструкций и элементов языка, которым приходится уделять внимание вместо изучения алгоритмов.<br/><br/>

Являясь приложением с открытым исходным кодом, интерпретатор Python используется по всему миру и поставляется в составе операционных систем на базе Linux, а также в компьютерах от фирмы Apple. Python популярен среди индивидуальных разработчиков, но также используется крупными компаниями в достаточно серьёзных продуктах, ориентированных на получение прибыли. На Python написан Reddi и YouTube. В Dropbox также активно применяется Python, а из-за сложностей динамической типизации и огромного количества кода компания перешла к статической типизации с помощью открытого проекта Mypy Также Python активно используется в Facebook и Instagram. Многие компании используют Python для тестирования аппаратного обеспечения, среди этих компаний значатся Intel, Cisco, Hewlett-Packard и IBM. Industrial Light & Magic и Pixar используют его при создании анимационных фильмов.<br/><br/>

Язык активно используется компанией Google в её поисковой системе, а YouTube в значительной степени написан с использованием Python. Кроме того, Google спонсирует разработку Python с 2010 года, и поддержку PyPI, основной системы распространения пакетов для Python.<br/><br/>

Сильными сторонами Python являются его модульность и возможность интегрироваться с другими языками программирования, в том числе в составе сложных комплексных приложений и систем. Сочетание простоты и лаконичности с большим количеством возможностей делает Python удобным в качестве скриптового языка[источник не указан 1331 день]. Многие проекты предоставляют прикладной интерфейс программирования на Python для написания скриптов, например, среды 3D-моделирования Autodesk Maya, Blender и Houdini, а также свободная геоинформационная система QGIS. Некоторые проекты реализуют базовую часть на более производительных языках программирования, а для упрощения работы предоставляют полноценный интерфейс прикладного программирования на Python[источник не указан 1331 день]. Так, движок свободного видеоредактора OpenShot реализован в виде библиотеки libopenshot, написанной на C++ с использованием библиотек на Си, а все возможности полностью покрыты прикладным интерфейсом программирования Python[значимость факта?]. Агентство национальной безопасности США использует Python для анализа данных, а NASA использует его при выполнении научных задач. Из инструментов, используемых в NASA, можно отметить свободный графический симулятор сети GNS3[англ.], который также хорошо зарекомендовал себя в корпоративной среде и используется в технологических компаниях, например, в Intel. На Python написана также свободная популярная программа нарезки 3D моделей для печати на 3D-принтерах Cura.<br/><br/>

Python с пакетами NumPy, SciPy и MatPlotLib активно используется как универсальная среда для научных расчётов в качестве замены распространённым специализированным коммерческим пакетам, таким как Matlab, предоставляя аналогичную функциональность и более низкий порог вхождения[175]. По большей части на Python написана также графическая программа Veusz[англ.], позволяющая создавать качественные графики, готовые для размещения в научных публикациях[значимость факта?]. Библиотека Astropy — популярный инструмент для астрономических расчётов[значимость факта?].<br/><br/>

Также Python является лучшим языком программирования по использованию в ИИ сфере<br/><br/>

Также Python подходит для выполнения нестандартных или сложных задач в системах сборки проектов, что обусловлено отсутствием необходимости предварительной компиляции исходных файлов. В проекте Google Test он используется для генерации исходного кода mock-объектов для классов языка C++[значимость факта?].<br/><br/>

Интерпретатор Python может использоваться в качестве мощной командной оболочки и скриптового языка для написания командных файлов ОС. Лёгкость обращения из Python-скриптов к внешним программам и наличие библиотек, дающих доступ к управлению системой, делают Python удобным инструментом для системного администрирования[181]. Он широко используется для этой цели на платформе Linux: обычно Python поставляется с системой, во многих дистрибутивах инсталляторы и визуальный интерфейс системных утилит написаны именно на Python. Используется он и в администрировании других Unix-систем, в частности, в Solaris и macOS. Кроссплатформенность самого языка и библиотек делает его привлекательным для унифицированной автоматизации задач системного администрирования в гетерогенных средах, где совместно применяются компьютеры с операционными системами различных типов.<br/><br/>

Будучи языком общего назначения Python применим почти во всех сферах деятельности. Фактически Python используется практически любой солидной компанией тем или иным образом как для выполнения текущих задач, так и в тестировании, администрировании или в разработке программных продуктов.</p>
            </div>
        </div>
    )
}