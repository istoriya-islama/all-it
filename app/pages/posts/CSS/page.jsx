import Cover from "../../../Components/js/Cover";


export const metadata = {
    title: "CSS",
    description: "Язык програмиорование CSS"
  };

export default function CSS(){
    const htmlCode1 = "<!DOCTYPE html>"
    const htmlCode2 = "<html>"
    const htmlCode3 = "<head>"
    const htmlCode4 = "....."
    const htmlCode5 = "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">"
    const htmlCode6 = "</head>"
    const htmlCode7 = "<body>"
    const htmlCode8 = "....."
    const htmlCode9 = "</body>"
    const htmlCode10 = "</html>"

    return(
        <div>
            <Cover title="Все о Программировании" namePage="CSS" image="/allIt.jpg" isShowBtn={false}/>
            <div className="text">
                <q>CSS (англ. Cascading Style Sheets «каскадные таблицы стилей») — формальный язык декодирования и описания внешнего вида документа (веб-страницы), написанного с использованием языка разметки (чаще всего HTML или XHTML). Также может применяться к любым XML-документам, например, к SVG или XUL.</q>
                <br/>
                <h2>Обзор</h2>
                <h3>Использование CSS</h3>
                <p>CSS используется создателями веб-страниц для задания цветов, шрифтов, стилей, расположения отдельных блоков и других аспектов представления внешнего вида этих веб-страниц. Основной целью разработки CSS является ограждение и отделение описания логической структуры веб-страницы (которое производится с помощью HTML или других языков разметки) от описания внешнего вида этой веб-страницы (которое теперь производится с помощью формального языка CSS). Такое разделение может увеличить доступность документа, предоставить большую гибкость и возможность управления его представлением, а также уменьшить сложность и повторяемость в структурном содержимом.

                Кроме того, CSS позволяет представлять один и тот же документ в различных стилях или методах вывода, таких как экранное представление, печатное представление, чтение голосом (специальным голосовым браузером или программой чтения с экрана) или при выводе устройствами, использующими шрифт Брайля</p>
                <br/>
                <h3>Способы подключения CSS к документу</h3>
                <p>Правила CSS могут располагаться как в самом веб-документе, внешний вид которого они описывают, так и во внешних файлах, имеющих расширение .css. Формат CSS — это текстовый файл, в котором содержится перечень правил CSS и комментариев к ним.
                Стили CSS могут быть подключены или внедрены в описываемый ими веб-документ четырьмя способами:

                когда описание стилей находится в отдельном файле, оно может быть подключено к документу посредством элемента <div className="code-mini">{"<link>"}</div>(Тег), включённого в элемент <div className="code-mini">{"<head>"}</div>(Тег):</p>
                <br/>
                <div className="code">
                    {htmlCode1}
                    <br/>
                    {htmlCode2}
                    <br/>
                    {htmlCode3}
                    <br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;{htmlCode4}
                    <br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;{htmlCode5}
                    <br/>
                    {htmlCode6}
                    <br/>
                    {htmlCode7}
                    <br/>
                    &nbsp;&nbsp;&nbsp;&nbsp;{htmlCode8}
                    <br/>
                    {htmlCode9}
                    <br/>
                    {htmlCode10}
                    <br/>
                </div>
                <br/>
                <h3>Правила построения CSS</h3>
                <p>В первых трёх случаях подключения стилей CSS к документу (см. выше) каждое правило CSS из файла имеет две основные части — селектор и блок объявлений. Селектор, расположенный в левой части правила до знака «{"{"}», определяет, на какие части документа (возможно, специально обозначенные) распространяется правило. Блок объявлений располагается в правой части правила. Он помещается в фигурные скобки, и, в свою очередь, состоит из одного или более объявлений, разделённых знаком «;». Каждое объявление представляет собой сочетание свойства CSS и значения, разделённых знаком «:». Селекторы могут группироваться в одной строке через запятую. В таком случае свойство применяется к каждому из них.</p>
                <div className="code">
                селектор, селектор {"{"}<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;свойство: значение;<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;свойство: значение;<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;свойство: значение;<br/>
                {"}"}
                </div>
                <br/>
                <p>В четвёртом случае подключения CSS к документу (см. список) правило CSS, являющееся значением атрибута style элемента, к которому он применяется, представляет собой перечень объявлений («свойство CSS : значение»), разделённых знаком «;».</p>
                <br/>
                <h3>Виды селекторов</h3>
                <h4>Универсальный селектор</h4>
                <div className="code">
                * {"{"}<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;margin: 0;<br/> 
                &nbsp;&nbsp;&nbsp;&nbsp;padding: 0; <br/>
                {"}"}
                </div>
                <br/>
                <h4>Селектор тегов</h4>
                <div className="code">
                p {"{"}<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;font-family: arial, helvetica, sans-serif; <br/>
                {"}"}
                </div>
                <br/>
                <h4>Селектор классов</h4>
                <div className="code">
                .note {"{"}<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;color: red; <br/>
                &nbsp;&nbsp;&nbsp;&nbsp;background-color: yellow; <br/>
                &nbsp;&nbsp;&nbsp;&nbsp;font-weight: bold; <br/>
                {"}"}
                </div>
                <br/>
                <h4>Селектор идентификаторов</h4>
                <div className="code">
                #paragraph1 {"{"}<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;margin: 0;<br/>
                {"}"}
                </div>
                <br/>
                <p>Основное различие между классами элементов и идентификаторами элементов в том, что идентификатор предназначен для одного элемента, тогда как класс обычно присваивают сразу нескольким. Тем не менее, современные браузеры, как правило, корректно отображают множественные элементы с одинаковым идентификатором. Также различие в том, что могут существовать множественные классы (когда класс элемента состоит из нескольких слов, разделённых пробелами). Для идентификаторов такое невозможно.<br/>

               Важно отметить следующее отличие идентификатора от класса: идентификаторы широко используются в JavaScript для нахождения уникального элемента в документе.<br/><br/>

               Имена классов и идентификаторов, в отличие от названий тегов и их атрибутов, чувствительны к регистру ввода букв.<br/><br/>

               Свойства классов и идентификаторов задаются с помощью соответствующих селекторов. Причём может быть задано как свойство класса в целом (в таком случае селектор начинается с „.“, например, „.big“) или свойство идентификатора самого по себе (в таком случае селектор начинается с „#“, например, „#first“), так и свойство какого-нибудь элемента этого класса или с этим идентификатором.<br/><br/>

               В CSS, помимо классов, задаваемых автором страницы, существует также ограниченный набор так называемых псевдоклассов, описывающих вид гиперссылок с определённым состоянием в документе, вид элемента, на котором находится фокус ввода, а также вид элементов, являющихся первыми дочерними элементами других элементов. Также в CSS существует четыре так называемых псевдоэлемента: первая буква, первая строка, применение специальных стилей до и после элемента.</p>
               <br/>
               <h3>Наследование. Каскадирование. Приоритеты стилей CSS.</h3>
               <p>Применение CSS к документам HTML основано на принципах наследования и каскадирования. Принцип наследования заключается в том, что свойства CSS, объявленные для элементов-предков, почти всегда наследуются элементами-потомками.<br/><br/>

               Принцип каскадирования применяется в случае, когда какому-то элементу HTML одновременно поставлено в соответствие более одного правила CSS, то есть, когда происходит конфликт значений этих правил. Чтобы разрешить такие конфликты, вводятся правила приоритета.<br/><br/>

               Наиболее низким приоритетом обладает стиль браузера;
               Следующим по значимости является стиль, заданный пользователем браузера в его настройках;
               И наиболее высоким приоритетом обладает стиль, заданный непосредственно автором страницы. И далее, уже в этом авторском стиле приоритеты расставляются следующим образом:
               Самым низким приоритетом обладают стили, наследуемые в документе элементом от своих предков;
               Более высоким приоритетом обладают стили, заданные во внешних таблицах стилей, подключённых к документу;<br/>
               Ещё более высоким приоритетом обладают стили, заданные непосредственно селекторами всех десяти видов (см. подраздел "виды селекторов"), содержащимися в контейнерах style данного документа. Нередки случаи, когда к какому-нибудь элементу имеют отношение, задают его вид, несколько таких селекторов. Такие конфликты между ними разрешаются с помощью расчёта специфичности каждого такого селектора и применения этих селекторов к данному элементу в порядке убывания их специфичностей. Расчёт специфичности будет описан ниже.<br/>
               Специфичность селекторов делится на 4 группы — a, b, c, d:
               если стиль встроенный (определён как style="...", то а=1, иначе a=0) ;
               значение b равно количеству идентификаторов (иначе — id=" ", они начинаются с #) в селекторе;
               значение c равно количеству классов (class=" ", они начинаются с .), псевдоклассов (они начинаются с :, например a:hover) и селекторов атрибутов (input{"["}type="text");<br/>
               значение d равно количеству селекторов типов элементов (h1 {"{"} color: blue; {"}"}) и псевдокод-элементов (p::first-line {"{"} color: blue; {"}"}). После этого полученное значение приводится к числу (обычно в десятичной системе счисления). Селектор, обладающий большим значением специфичности, обладает и большим приоритетом.
               <br/>
               Таблица расчёта специфичности:</p>
               <table>
                <tr>
                    <th>Селектор</th>
                    <th>a, b, c, d</th>
                    <th>Число</th>
                </tr>
                <tr>
                    <td>span</td>
                    <td>0, 0, 0, 1</td>
                    <td>1</td>
                </tr>
                <tr>
                    <td>div .class</td>
                    <td>0, 0, 1, 1</td>
                    <td>11</td>
                </tr>
                <tr>
                    <td>#id .class</td>
                    <td>0, 1, 1, 0</td>
                    <td>110</td>
                </tr>
                <tr>
                    <td>div span</td>
                    <td>0, 0, 0, 2</td>
                    <td>2</td>
                </tr>
                <tr>
                    <td>.class</td>
                    <td>0, 0, 1, 0</td>
                    <td>10</td>
                </tr>
                <tr>
                    <td>#id span</td>
                    <td>0, 1, 0, 1</td>
                    <td>101</td>
                </tr>
               </table>
               <p>Но, самым высоким приоритетом обладают стили, объявленные автором страницы или пользователем, с помощью сопроводительного правила!important. Если таких свойств несколько, то предпочтение отдаётся в первую очередь стилям, заданным автором или пользователем, а для остальных свойств, которые будут являться задаваемыми автором страницы, потребуется определить их специфичности по принципам, описанным выше, и применять эти свойства в порядке убывания этих специфичностей.</p>
               <br/>
               <h3>Пример таблицы стилей</h3>
               <p>Пример таблицы стилей (в таком виде она может быть либо размещена в отдельном файле .css либо же обрамлена тегами <div className="code-mini">{"<style>"}</div> и размещена в «шапке» той самой веб-страницы, на которую она действует):</p>
               <br/>
               <div className="code">
               p {"{"}<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;font-family: arial, helvetica, sans-serif; <br/>
              {"}"}<br/>
               h2 {"{"}<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;font-size: 20pt; <br/>
               &nbsp;&nbsp;&nbsp;&nbsp;color: red; <br/>
               &nbsp;&nbsp;&nbsp;&nbsp;background: white; <br/>
              {"}"}<br/>
              .note {"{"}<br/>
              &nbsp;&nbsp;&nbsp;&nbsp;color: red; <br/>
              &nbsp;&nbsp;&nbsp;&nbsp;background-color: yellow; <br/>
              &nbsp;&nbsp;&nbsp;&nbsp;font-weight: bold; <br/>
              {"}"}<br/>
              p#paragraph1 {"{"}<br/>
              &nbsp;&nbsp;&nbsp;&nbsp;padding-left: 10px;<br/>
              {"}"}<br/>
              a:hover {"{"}<br/>
              &nbsp;&nbsp;&nbsp;&nbsp;text-decoration: none;<br/>
              {"}"}<br/>
              #news p {"{"}<br/>
              &nbsp;&nbsp;&nbsp;&nbsp;color: blue;<br/>
              {"}"}<br/>
              {"["}type="button"{"]"} {"{"}<br/>
              &nbsp;&nbsp;&nbsp;&nbsp;background-color: green;<br/>
              {"}"}<br></br>
              </div>
              <p>
              Здесь приведено семь правил CSS с селекторами p, h2, .note, p#paragraph1, a:hover, #news p и [type="button"].<br/><br/>

              Первое правило присвоено HTML-элементу p (абзацу) — назначен стиль. Абзацы будут отображаться шрифтом Arial или, если такой шрифт недоступен, тогда Helvetica или Sans-serif, иначе, другим шрифтом этого семейства.<br/>
              Второе правило присвоено HTML-элементу h2 (заголовку второго уровня). Заголовок второго уровня будет отображаться красным на белом фоне с увеличенным размером.<br/>
              Третье правило будет применено к любому элементу, атрибут class которого равен «note». Например, к параграфу: <div className="code-mini">{"<p class=\"note\">"}Этот абзац будет выведен полужирным шрифтом красного цвета на жёлтом фоне. {"</p>"}</div>?<br/>
             Четвёртое правило будет применяться только к элементу p, атрибут id которого равен paragraph1. Такой элемент будет иметь внутренний отступ в 10 пикселей (padding).<br/>
             Пятое правило определяет стиль hover для элементов a — гиперссылок. По умолчанию, в большинстве браузеров текст элементов a подчёркивается. Это правило уберёт подчёркивание, когда указатель мыши находится над этими элементами.<br/>
             Шестое правило, применяется для элементов p, которые находятся внутри какого-либо элемента с атрибутом id, равным «news» (#news p — это типичный случай селектора потомков, см. 5-й пункт списка выше).<br/>
             Седьмое правило применяется для всех элементов, у которых атрибут type равен button. Например, это правило будет применено к элементу <div className="code-mini">{"<input type=\"button\">"}</div> или <div className="code-mini">{"<button type=\"button\">"}Кнопка{"</button>"}</div> (обычная кнопка), изменив его цвет фона на зелёный.
              </p>
              <br/>
              <br/>
              <h2>CSS-вёрсткa</h2>
              <p>До появления CSS оформление веб-страниц осуществлялось исключительно средствами HTML, непосредственно внутри содержимого документа. Однако с появлением CSS стало возможным принципиальное разделение содержания и представления документа. За счёт этого нововведения стало возможным лёгкое применение единого стиля оформления для массы схожих документов, а также быстрое изменение этого оформления.|<br/><br/>

              Преимущества:<br/><br/>

              Несколько дизайнов страницы для разных устройств просмотра. Например, на экране дизайн будет рассчитан на большую ширину, во время печати меню не будет выводиться, а на КПК и сотовом телефоне меню будет следовать за содержимым.<br/>
              Уменьшение времени загрузки страниц сайта за счёт переноса правил представления данных в отдельный CSS-файл. В этом случае браузер загружает только структуру документа и данные, хранимые на странице, а представление этих данных загружается браузером только один раз и может быть закэшировано.<br/>
              Простота последующего изменения дизайна. Не нужно править каждую страницу, а достаточно лишь изменить CSS-файл.<br/>
              Дополнительные возможности оформления. Например, с помощью CSS-вёрстки можно сделать блок текста, который остальной текст будет обтекать (например для меню) или сделать так, чтобы меню было всегда видно при прокрутке страницы.<br/>
              Недостатки:<br/><br/>

              Различное отображение вёрстки в различных браузерах (особенно устаревших), которые по-разному интерпретируют одни и те же данные CSS.<br/>
              Часто встречающаяся необходимость на практике исправлять не только один CSS-файл, но и теги HTML, которые сложным и ненаглядным способом связаны с селекторами CSS, что иногда сводит на нет простоту применения единых файлов стилей и значительно увеличивает время редактирования и тестирования.</p>
              <br/>
              <br/>
              <h2>История создания и развития CSS</h2>
              <p>CSS — одна из широкого спектра технологий, одобренных консорциумом W3C и получивших общее название «стандарты Web». В 1990-х годах стала ясна необходимость стандартизировать Web, создать какие-то единые правила, по которым программисты и веб-дизайнеры проектировали бы сайты. Так появились языки HTML 4.01 и XHTML, и стандарт CSS.<br/><br/>

              В начале 1990-х различные браузеры имели свои стили для отображения веб-страниц. HTML развивался очень быстро и был способен удовлетворить все существовавшие на тот момент потребности по оформлению информации, поэтому CSS не получил тогда широкого признания.<br/><br/>

              Термин «каскадные таблицы стилей» был предложен Хоконом Ли в 1994 году. Совместно с Бертом Босом он стал развивать CSS.<br/><br/>

              В отличие от многих существовавших на тот момент языков стиля, CSS использует наследование от родителя к потомку, поэтому разработчик может определить разные стили, основываясь на уже определённых ранее стилях.<br/>

              В середине 1990-х Консорциум Всемирной паутины (W3C) стал проявлять интерес к CSS, и в декабре 1996 года была издана рекомендация CSS1.</p>
              <br/>
              <h3>Уровень 1 (CSS1)</h3>
              <p>Рекомендация W3C, принята 17 декабря 1996 года, откорректирована 11 января 1999 года[3]. Среди возможностей, предоставляемых этой рекомендацией:<br/><br/>

              Параметры шрифтов. Возможности по заданию гарнитуры и размера шрифта, а также его стиля — обычного, курсивного или полужирного.<br/>
              Цвета. Спецификация позволяет определять цвета текста, фона, рамок и других элементов страницы.<br/>
              Атрибуты текста. Возможность задавать межсимвольный интервал, расстояние между словами и высоту строки (то есть межстрочные отступы)<br/>
              Выравнивание для текста, изображений, таблиц и других элементов.<br/>
              Свойства блоков, такие как высота, ширина, внутренние (padding) и внешние (margin) отступы и рамки. Также в спецификацию входили ограниченные средства по позиционированию элементов, такие как float и clear.</p>
              <br/>
              <h3>Уровень 2 (CSS2)</h3>
              <p>Рекомендация W3C, принята 12 мая 1998 года[4]. Основана на CSS1 с сохранением обратной совместимости за несколькими исключениями. Добавление к функциональности:<br/><br/>

              Блочная вёрстка. Появились относительное, абсолютное и фиксированное позиционирование. Позволяет управлять размещением элементов по странице без табличной вёрстки.<br/>
              Типы носителей. Позволяет устанавливать разные стили для разных носителей (например монитор, принтер, КПК).<br/>
              Звуковые таблицы стилей. Определяет голос, громкость и т. д. для звуковых носителей (например для слепых посетителей сайта).<br/>
              Страничные носители. Позволяет, например, установить разные стили для элементов на чётных и нечётных страницах при печати.<br/>
              Расширенный механизм селекторов.<br/>
              Указатели.<br/>
              Генерируемое содержимое. Позволяет добавлять содержимое, которого нет в исходном документе, до или после нужного элемента.<br/>
              В настоящее время W3C больше не поддерживает CSS2 и рекомендует использовать CSS2.1</p>

              <h4>Уровень 2, ревизия 1 (CSS2.1)</h4>
              <p>Рекомендация W3C, принята 7 июня 2011 года.<br/><br/>

              CSS2.1 основана на CSS2. Кроме исправления ошибок, в новой ревизии изменены некоторые части спецификации, а некоторые[какие?] и вовсе удалены. Удалённые части могут быть в будущем добавлены в CSS3.</p>
              <br/>
              <h3>Уровень 3 (CSS3)</h3>
              <p>CSS3 (англ. Cascading Style Sheets 3 — каскадные таблицы стилей третьего поколения) — активно разрабатываемая спецификация CSS. Представляет собой формальный язык, реализованный с помощью языка разметки. Самая масштабная редакция по сравнению с CSS1, CSS2 и CSS2.1. Главной особенностью CSS3 является возможность создавать анимированные элементы без использования JS, поддержка линейных и радиальных градиентов, теней, сглаживания и прочее.<br/><br/>

              Преимущественно используется как средство описания и оформления внешнего вида веб-страниц, написанных с помощью языков разметки HTML и XHTML, но может также применяться к любым XML-документам, например, к SVG или XUL.<br/><br/>

              Разрабатываемая версия (список всех модулей).<br/><br/>

              В отличие от предыдущих версий спецификация разбита на модули, разработка и развитие которых идёт независимо. CSS3 основан на CSS2.1, дополняет существующие свойства и значения и добавляет новые.<br/><br/>

              Нововведения, начиная с малых, вроде закруглённых углов блоков, заканчивая трансформацией (анимацией) и, возможно, введением переменных</p>
              <br/>
              <h3>Уровень 4 (CSS4)</h3>
              <p>Разрабатывается W3C с 29 сентября 2011 года.<br/><br/>

              Модули CSS4 построены на основе CSS3 и дополняют их новыми свойствами и значениями. Все они существуют пока в виде черновиков (working draft).<br/><br/>

              Например:<br/><br/>

              &nbsp;&nbsp;&nbsp;&nbsp;CSS Cascading and Inheritance Level 4
              &nbsp;&nbsp;&nbsp;&nbsp;Selectors Level 4
              &nbsp;&nbsp;&nbsp;&nbsp;CSS Image Values and Replaced Content Module Level 4
              &nbsp;&nbsp;&nbsp;&nbsp;CSS Backgrounds and Borders Module Level 4
              &nbsp;&nbsp;&nbsp;&nbsp;CSS Color Module Level 4
              &nbsp;&nbsp;&nbsp;&nbsp;Media Queries Level 4
              &nbsp;&nbsp;&nbsp;&nbsp;CSS Pseudo-Elements Module Level 4
              &nbsp;&nbsp;&nbsp;&nbsp;CSS Text Module Level 4</p>
              <br/>
              <br/>
              <h2>Поддержка CSS браузерами</h2>
              <p>Наиболее полно поддерживающими стандарт CSS являются работающие на движках Gecko (Mozilla Firefox и др.), WebKit (Safari, Arora, Google Chrome) и Presto (Opera) браузеры.<br/><br/>

              Бывший самый распространённый браузер[12] Internet Explorer 6 поддерживает CSS не полностью.<br/><br/>

              Вышедший спустя семь лет Internet Explorer 7 значительно улучшил уровень поддержки CSS, но всё ещё содержал значительное количество ошибок.<br/><br/>

              В Internet Explorer 8 используется новый движок, который полностью поддерживает CSS 2.1 и частично — CSS 3.<br/><br/>

             Для проверки поддержки браузером веб-стандартов, в том числе и различных частей стандарта CSS, был разработан тест Acid.</p>
             <h3>Различные блоковые модели</h3>
             <p>В стандартах CSS от Консорциума W3C используется модель, в которой свойство width определяет ширину содержимого блока, не включая в неё отступы и рамки. Ранние версии Internet Explorer (4 и 5) реализовали собственную модель, в которой width определяет расстояние между рамками блока, включая отступы (padding) и рамки (border). Кроме Internet Explorer 5, эту модель также понимают браузеры Netscape 4 и Opera 7. Поддержка стандартной модели W3C появилась в IE только в шестой версии.<br/><br/>

             В разрабатываемом стандарте CSS3 для решения этой проблемы введено свойство box-sizing со значениями content-box для указания на использование стандартной модели W3C и border-box для использования модели IE 5.<br/><br/>

             В браузере Mozilla при поддержке этого свойства под собственным «рабочим» названием -moz-box-sizing ввели ещё одно значение — padding-box, таким образом создав третью блочную модель, в которой width — это размер содержимого и отступов блока, не включая рамки.</p>
             <h2>CSS-фильтры</h2>
             <p>Различия в реализации CSS различными браузерами заставляют веб-разработчиков искать решения, как заставить все браузеры отображать страницу одинаково. CSS-фильтры (также часто называемые CSS-хаками) позволяют выборочно применять стили к различным элементам. Например, известно, что Internet Explorer 6 применяет правила, использующие селекторы вида * html селектор (фильтр, известный как «star html bug»). Чтобы блоковая модель W3C и IE, работающая в Quirks mode, отображала блок #someblock шириной в 100 пикселей и внутренними отступами в 10 пикселей, можно написать такой код:</p>
             <br/>
             <div className="code">
             /* Модель W3C - 80px ширина содержимого и 10px отступы с каждой стороны */<br/>
             #someblock {"{"} width: 80px; padding: 10px; {"}"}
             </div>
             <br/>
             <div className="code">
             /* Следующее правило применит только IE6. */<br/>
             * html #someblock {"{"} width: 100px; padding: 10px; {"}"}
             </div>
             <br/>
             <p>Ещё одним способом выборочного применения правил для Internet Explorer являются условные комментарии.</p>
             <br/>
             <h3>Безопасность</h3>
             <p>Все поддерживаемые в 2010 году версии Internet Explorer были уязвимы: при обработке браузером каскадных стилей (CSS) может возникнуть неинициализированная память, впоследствии используемая для удалённого запуска вредоносного кода на компьютере пользователя.</p>
             <br/><br/>
             <h2>CSS Framework</h2>
             <p>CSS Framework (также Web design framework) — это заранее подготовленная CSS-библиотека, созданная для упрощения работы верстальщика, быстроты разработки и исключения максимально возможного числа ошибок вёрстки (проблемы совместимости различных версий браузеров и т. д.). Так же, как и библиотеки скриптовых языков программирования, CSS-фреймворки, обычно имеющие вид внешнего .css-файла, «подключаются» к проекту (добавляются в заголовок веб-страницы), позволяя неискушённому в тонкостях вёрстки программисту или дизайнеру правильно создать html-макет.</p>
             <br/><br/>
             <h2>Расширения CSS</h2>
             <p>асто при вёрстке страниц нужно использовать одно и то же значение много раз: один и тот же цвет, один и тот же шрифт. И если это значение нужно будет изменить, то придётся менять во многих местах.<br/><br/>

             Для решения этих вопросов и ускорения разработки существует несколько расширений (препроцессоров) языка CSS. Расширений в том смысле, что код CSS является валидным кодом для расширения, но не наоборот. Чтобы из кода «расширенного CSS» получился обычный CSS-файл, воспринимаемый браузером, необходимо выполнить компиляцию. Компиляция может быть нескольких типов:<br/>

             во время запуска страницы на стороне клиента (средствами JavaScript)<br/>
             во время запуска страницы на стороне сервера<br/>
             во время вёрстки сайта средствами специального компилятора<br/>
             Примеры расширений (препроцессоров) CSS:<br/><br/>

             Sass<br/>
             LESS<br/>
             Stylus<br/>
             Языки некоторых расширений PostCSS</p>
            </div>
        </div>
    )
}