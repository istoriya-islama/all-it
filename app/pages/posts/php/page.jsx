import Cover from "../../../Components/js/Cover";
import UrlProtocol from "../../../Components/js/UrlProtocol";


export const metadata = {
    title: "PHP",
    description: "Язык програмиорование PHP"
  };

export default function PHP(){
    return(
        <div>
            <Cover title="Все о Программировании" namePage="PHP" image="/allIt.jpg" isShowBtn={false}/>
            <div className="text">
                <q>PHP (англ. PHP: Hypertext Preprocessor — «PHP: препроцессор гипертекста»; первоначально PHP/FI (Personal Home Page / Form Interpreter), а позже названный Personal Home Page Tools — «Инструменты для создания персональных веб-страниц») — скриптовый язык общего назначения, интенсивно применяемый для разработки веб-приложений. В настоящее время поддерживается подавляющим большинством хостинг-провайдеров и является одним из лидеров среди языков, применяющихся для создания динамических веб-сайтов.<br/><br/>

               Язык и его интерпретатор (Zend Engine) разрабатываются группой энтузиастов в рамках проекта с открытым кодом. Проект распространяется под собственной лицензией, несовместимой с GNU GPL.</q>
               <br/><br/>
               <h2>Область применения</h2>
               <p>В области веб-программирования, в частности, серверной части, PHP — один из популярных сценарных языков (наряду с JSP, Perl и языками, используемыми в ASP.NET).<br/><br/>

               Популярность в области построения веб-сайтов определяется наличием большого набора встроенных средств и дополнительных модулей для разработки веб-приложений. Основные из них:</p>
               <br/>
               <ul className="list">
                <li>Автоматическое извлечение <a href="../http">POST</a>- и <a href="../http">GET</a>-параметров, а также переменных окружения веб-сервера в предопределённые массивы;</li>
                <li>Взаимодействие с большим количеством различных систем управления базами данных через дополнительные модули (MySQL, MySQLi, SQLite, PostgreSQL, Oracle Database (OCI8), Microsoft SQL Server, Sybase, ODBC, mSQL, IBM DB2, Cloudscape и Apache Derby, Informix, Ovrimos SQL, Lotus Notes, DB++, DBM, dBase, DBX, FrontBase, FilePro, Ingres II, SESAM, Firebird и InterBase, Paradox File Access, MaxDB, интерфейс PDO, Redis);</li>
                <li>Автоматизированная отправка <a href="../http">HTTP</a>-заголовков;</li>
                <li>Работа с <a href="../http">HTTP</a>-авторизацией;</li>
                <li>Работа с cookies и сессиями;</li>
                <li>Работа с локальными и удалёнными файлами, сокетами;</li>
                <li>Обработка файлов, загружаемых на сервер;</li>
                <li>Работа с XForms.</li>
                <li>Создание и работа с API</li>
                <li>Создание приложение с графическим интерфейсом пользователя при использовании фреймворка Qt Designer</li>
                <li>Создание консольных приложений</li>
               </ul>
               <br/>
               <p>По состоянию на 2022 год используется сотнями тысяч разработчиков; согласно рейтингу корпорации TIOBE, базирующемуся на данных поисковых систем, в декабре 2022 года PHP находился на 10 месте по популярности среди языков программирования.<br/><br/>

               Входит в LAMP — распространённый набор ПО для создания и хостинга веб-сайтов (Linux, Apache, MySQL, PHP), а также LEMP — не менее распространённый набор ПО (Linux, Nginx, MySQL, PHP).<br/><br/>

               Среди сайтов, использующих PHP — Facebook, Yahoo!, Baidu.<br/><br/>

              Также, на PHP написаны такие системы управления сайтами (CMS) и фреймворки (CMF), как Drupal, Joomla, Laravel, Symfony, WordPress, Yii и другие.</p>
              <br/>
              <h2>Поддержка версий</h2>
              <div className="separator">
                <div className="separator-left">
                    <p>Каждая новая минорная ветвь разработки PHP (например, 8.4), разрабатывается в течение одного года и, как правило, в период с ноября по декабрь выходит очередной релиз <span className="color-green"></span> первоначальной стабильной версии, которая бесплатно поддерживается в течение 4 лет. В течение 2 лет осуществляется <span className="color-light-green"></span> активная поддержка ветви, обнаруженные ошибки и проблемы безопасности исправляются и выпускаются обновления в виде регулярных точечных релизов.<br/><br/>
                    
                    После окончания двухлетнего периода активной поддержки каждая ветвь получает <span className="color-light-yellow"></span> временную поддержку в течение ещё 2 дополнительных лет только для критических обновлений, касающихся проблем безопасности. Релизы в течение этого периода выходят по мере необходимости: может быть несколько релизов или ни одного, в зависимости от количества отчётов об ошибках.<br/><br/>
                    
                    Начиная с версии PHP 8.1, по истечении 4 лет с релиза первоначальной стабильной версии, срок поддержки ветви <span className="color-light-red"></span> авершается 31 декабря соответствующего года (наступает конец жизни ветви — End Of Life, также обозначается EOL) и она больше не поддерживается. В случае, если релиз первоначальной стабильной версии выйдет с задержкой (после нового года), то дополнительный год поддержки не предоставляется: например, релиз ветви PHP 8.4 был запланирован на ноябрь 2024 года, но даже если бы произошла задержка и дата релиза была бы перенесена на 2025 год, то срок бесплатной поддержки ветви все равно продлится только до 31 декабря 2028 года.  Использование устаревших версий PHP из неподдерживаемых ветвей не рекомендовано, потому что это может привести к уязвимостям в безопасности и ошибкам, которые были исправлены в более поздних версиях.<br/><br/>
                    
                    Zend предлагает платную активную долгосрочную поддержку — PHP Long Term Support (PHP LTS):<br/></p>
                    <ul className="list">
                        <li><span className="payment-off"><span>$</span></span> опционально платную для актуальных ветвей PHP;</li>
                        <li><span className="payment-on"><span>$</span></span> только платную для устаревших ветвей PHP.</li>
                    </ul>
                    <br/>
                    <p>Срок платной поддержки каждой ветви начиная с релиза первоначальной стабильной версии составляет, как минимум, 5 лет.</p>
                </div>
                <span className="separator-liner"></span>
                <aside className="separator-right">
                    <table>
                        <tr>
                            <th>Последняя версия ветви</th>
                            <th>Полный срок поддержки ветви</th>
                        </tr>
                        <tr>
                            <td className="color-light-green"><p>8.4.2</p></td>
                            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;21 ноября 2024 — 31 декабря 2028<br/>
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Завершение ожидается через 3 года 11 месяцев 27 дней.<br/><br/>

                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="payment-off"><span>$</span></span>  PHP LTS до конца 2030.</td>
                        </tr>
                        <tr>
                            <td className="color-light-green">8.3.15</td>
                            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23 ноября 2023 — 31 декабря 2027.<br/>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Завершение ожидается через 2 года 11 месяцев 27 дней.<br/><br/>
                            
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="payment-off"><span>$</span></span> HP LTS до конца 2029.</td>
                        </tr>
                        <tr>
                            <td className="color-light-yellow">8.2.27</td>
                            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8 декабря 2022 — 31 декабря 2026.<br/>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8 декабря 2022 — 31 декабря 2026.<br/><br/>

                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="payment-off"><span>$</span></span> PHP LTS до конца 2028.</td>
                        </tr>
                        <tr>
                            <td className="color-light-yellow">8.1.31</td>
                            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25 ноября 2021 — 31 декабря 2025.<br/>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Завершение ожидается через 11 месяцев 27 дней.<br/><br/>

                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="payment-off"><span>$</span></span> PHP LTS до конца 2027.</td>
                        </tr>
                        <tr>
                            <td className="color-light-red">8.0.30</td>
                            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;26 ноября 2020 — 26 ноября 2023.<br/>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="payment-on"><span>$</span></span> PHP LTS до конца 2025.
                            </td>
                        </tr>
                        <tr>
                            <td className="color-light-red">7.4.33</td>
                            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28 ноября 2019 — 28 ноября 2022.<br/>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="payment-on"><span>$</span></span> PHP LTS до конца 2026.
                            </td>
                        </tr>
                        <tr>
                            <td className="color-light-red">7.3.33</td>
                            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6 декабря 2018 — 6 декабря 2021.<br/>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="payment-on"><span>$</span></span> PHP LTS до конца 2026.
                            </td>
                        </tr>
                        <tr>
                        <td className="color-light-red">7.2.34</td>
                            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;30 ноября 2017 — 30 ноября 2020.<br/>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="payment-on"><span>$</span></span> PHP LTS до конца 2026.
                            </td>
                        </tr>
                        <tr></tr>
                        <tr></tr>
                        <tr></tr>
                        <tr></tr>
                    </table>
                </aside>
              </div>
              <br/>
              <h3>Распределение версий PHP</h3>
              <div className="separator">
                <div className="separator-left">
                    <p>W3Techs сообщает, что по состоянию на 21 ноября 2024 года (день релиза PHP 8.4) «PHP используется на 75,4 % всех веб-сайтов, чей серверный язык программирования мы знаем». Также сообщается, что из всех сайтов, использующих PHP:</p>
                    <br/>
                    <ul className="list">
                        <li><strong>PHP</strong> <span className="color-text-green">8.x</span> используют <strong>37,9 %</strong> пользователей, из которых актуальные ветви с активной или временной бесплатной поддержкой (8.4, 8.3, 8.2 и 8.1) используют <strong>28,27 %</strong> пользователей;</li>
                        <li><strong>PHP</strong> <span className="color-text-red">7.x</span> используют <strong>49,1 %</strong> — большинство пользователей:</li>
                        <li><strong>PHP</strong> <span className="color-text-blue">5.x</span> используют <strong>12,9 %</strong> пользователей, версии, которые не поддерживаются исправлениями безопасности с 2018 года и, как известно, имеют серьёзные уязвимости.</li>
                        <li><strong>PHP</strong> <span className="color-text-gray">4.x</span> используют <strong>0,1 %</strong> пользователей, версии, которые также не поддерживаются.</li>
                    </ul>
                    <br/>
                    <p>Это означает, что по состоянию на 21 ноября 2024 года подавляющее большинство сайтов — 71,7 %, использующих PHP, могут быть уязвимы для взлома; хотя в рамках PHP LTS от Zend ветви <span className="color-orange"></span>8.0, <span className="color-red"></span>7.4, <span className="color-red-light"></span>7.3, <span className="color-light-red"></span>7.2 (в совокупности 55 %) могут поддерживаться, кроме того некоторые дистрибутивы Linux, такие как Ubuntu и Debian, также предоставляют коммерческую поддержку и платные исправления безопасности, например, для ветви <span className="color-red"></span>7.4.<br/>
                    Устаревшие и неподдерживаемые ветви PHP, включая <span className="color-light-red-light"></span>7.1, <span className="color-lihgt-red-l"></span>7.0, <span className="color-text-blue">5.x</span> и <span className="color-text-gray">4.x</span> (в совокупности 16,65 %) настоятельно не рекомендуются к использованию.</p>
                </div>
                <div className="separator-liner"></div>
                <aside className="separator-right">
                    <h4>Используемые версии PHP на 21.11.2024:
                    день релиза PHP 8.4</h4>
                    <br/>
                    <img src="/statistic.png" alt="statistic" className="img-center"/>
                    <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>
                    <br/><br/>
                    <p>
                        <span className="color-green"></span> PHP 8.4 (менее 0,1 % от PHP 8)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="color-light-blue"></span> PHP 5.4 (15,3 % от PHP 5) — 2,9737 %<br/>
                        <span className="color-light-green"></span> PHP 8.3 (9,40 % от PHP 8) — 3,56 %&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="color-light-blue-light"></span> PHP 5.3 (14,7 % от PHP 5) — 1.8963 %<br/>
                        <span className="color-light-yellow"></span>  PHP 8.2 (26,6 % от PHP 8) — 10,08 %&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="color-blue-light"></span> PHP 5.2 (6,80 % от PHP 5) — 0,8772 %<br/>
                        <span className="color-light-orange"></span> PHP 8.1 (38,6 % от PHP 8) — 14,63 %&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="color-light-blue-l"></span> PHP 5.1 (0,40 % от PHP 5) — 0,0516 %<br/>
                        <span className="color-orange"></span> PHP 8.0 (25,4 % от PHP 8) — 9,63 %&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="color-light-blue-light-l"></span> PHP 5.0 (менее 0,1 % от PHP 5)<br/>
                        Совокупная доля PHP  <span className="color-text-green">8.x</span>  — 37,9 %&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Совокупная доля PHP  <span className="color-text-blue">5.x</span>  — 12,9 %<br/>
                        <span className="color-red"></span> PHP 7.4 (72,3 % от PHP 7) — 35,50 %&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="color-dark-gray"></span> PHP 4.4 (75,9 % от PHP 4) — 0,0759 %<br/>
                        <span className="color-red-light"></span>  PHP 7.3 (11,6 % от PHP 7) — 5,70 %&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="color-gray"></span> PHP 4.3 (19,2 % от PHP 4) — 0,0192 %<br/>
                        <span className="color-light-red"></span> PHP 7.2 (8,60 % от PHP 7) — 4,22 %&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="color-gray-light"></span> PHP 4.2 (3,70 % от PHP 4) — 0,0037 %<br/>
                        <span className="color-light-red-light"></span>  PHP 7.1 (3,70 % от PHP 7) — 1,82 %&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="color-light-gray"></span> PHP 4.1 (0,90 % от PHP 4) — 0.0009 %<br/>
                        <span className="color-light-red-l"></span> PHP 7.0 (3,80 % от PHP 7) — 1,87 %&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className="color-light-gray-light"></span> PHP 4.0 (0,40 % от PHP 4) — 0,0004 %<br/>
                        Совокупная доля PHP  <span className="color-text-red">7.x</span>  — 49,1 %&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Совокупная доля PHP <span className="color-text-gray">4.x</span>  — 0,1 %<br/>
                        <span className="color-dark-blue"></span>  PHP 5.6 (54,4 % от PHP 5) — 7,0176 %<br/>
                        <span className="color-blue"></span> PHP 5.5 (8,20 % от PHP 5) — 1,0578 %<br/>
                    </p>
                </aside>
                </div>
                <br/>
                <h2>Дополнительные возможности</h2>
                <p>Язык автоматически поддерживает <a href="../http">HTTP</a> Cookies в соответствии со стандартами Netscape. Это позволяет проводить установку и чтение небольших сегментов данных на стороне клиента. Работа с Cookies организована посредством сеансов (сессий). У сессий есть срок действия (после его истечения данные удаляются), в сессиях можно хранить и редактировать разные типы данных, в том числе сериализованные — пропущенные через serialize (процесс происходит автоматически), PHP-объекты.</p>
                <br/>
                <h3>Создание GUI-приложений</h3>
                <p>PHP не ориентирован на создание десктопных приложений, но есть потребность в создании интерфейсов для настройки серверов, беспрерывного выполнения, отладки скриптов (сценариев), управления локальными и тестовыми серверами, и т. п. Из-за этого и возникли решения данной проблемы.</p>
                <br/>
                <h4>Расширения</h4>
                <p>Основное использование расширений — надстройки библиотек интерфейсов пользователя (UI-библиотек).<br/><br/>
                
                Расширения условно делятся на три группы:</p>
                <br/>
                <ul className="list">
                    <li>Расширения для работы с графическим интерфейсом пользователя (GUI), такие как PHP-GTK, PHP-Qt и PHP-WinBinder;</li>
                    <li>Расширения для интеграции с другими языками программирования и технологиями, например, PHP-Java Bridge, PHP-Python и PHP-Ruby;</li>
                    <li>Расширения для улучшения производительности и функциональности, такие как APCu, Xdebug и Memcached.</li>
                </ul>
                <br/>
                <p>Разработаны расширения, такие, как двусторонняя обёртка для использования других языков при написании расширений PHP, и наоборот. Например, PSV Component Library, — проект, состоящий из трёх подпроектов:</p>
                <br/>
                <ul className="list">
                    <li>PHP4Delphi реализует соединения PHP с программами, написанными на Delphi средствами WinAPI; разрабатывался с 1999 года, но не обновлялся с 2009 года, из-за чего появились ответвления;</li>
                    <li>PHP extensions development framework — средство создания расширений PHP, VCL-компоненты — неотъемлемая часть PHP4Delphi, базовые компоненты которой нужны для создания приложений;</li>
                    <li>php4 Applications — расширение для использования PHP в других языках, базирующееся на PHP4Delphi, дающее доступ к макросам и упрощающее использование PHP, избавляя от создания обёртки.</li>
                </ul>
                <br/>
                <h4>Среды разработки (IDE)</h4>
                <p>Есть место и полноценным средам разработки для GUI PHP:<br/></p>
                <ul className="list">
                    <li><strong>Dev PHP</strong></li>
                </ul>
                <p>Первопроходцем в этой категории является студия Dev PHP-IDE, которая использовала Kylix (Delphi) в качестве основы интерфейса и php-cli для создания пользовательских программ.<br/><br/>

                Она включала в себя редактор кода, несколько инструментов и визуальный просмотр <a href="../HTML">HTML</a>-страниц.<br/><br/>

                Впервые была представлена в 2002 году, сейчас имеет 3 стабильные версии, но разработка не продолжается — остановилась из-за гибели главного разработчика в автокатастрофе.</p>
                <br/>
                <ul className="list">
                    <li><strong>CodeGear Rad Studio (Расширение)</strong></li>
                </ul>
                <p>После DevPHP IDE появилось расширение — набор компонентов для CodeGear Rad Studio 2009 на базе php4delphi с некоторыми улучшениями (веб-элементы, инспектор, отладчик), поддержка её длилась в течение четырёх версий, вторая из которых вошла в платное расширение Rad Studio 2010: была возможность использовать скрипты, задавать стиль веб-компонентам, просматривать стили и веб-страницы до сборки программы, запускать локальный сервер, собирать программу, как отдельное приложение и отлаживать код. С выходом Delphi XE расширение получило название RADPHP Xe. Далее сама студия стала называться Embarcadero Delphi, и работа над данным расширением была приостановлена на неопределённый срок.</p>
                <br/>
                <ul className="list">
                    <li><strong>DevelStudio (RAD)</strong></li>
                </ul>
                <p>В 2009 году на базе php4delphi началась разработка среды для создания графических PHP-приложений, к разработке которой позже присоединился Ростислав Романов. Среда получила название PHP DevelStudio, первой опубликованной версией стала 0.1.7. DevelStudio имела небольшое количество компонентов в наборе инструментов и работала на устаревшем PHP 4. Во второй версии DevelStudio получила поддержку PHP 5. Были добавлены потоки, произведены множественные изменения и улучшения. Код сборки программ стал закрытым, предыдущие версии программы и сообщения на форуме были удалены с целью воспрепятствования злоумышленникам.<br/><br/>

                Вторая версия DevelStudio так же получила набор компонентов AlphaControls, вследствие чего её стали использовать для создания вредоносных программ в силу её простоты и понятности. Популярные на то время антивирусы (MacAffee, AVG, Avira) стали распознавать любые скомпилированные в DevelStudio программы как вирусы.<br/><br/>

                Через некоторое время автор AlphaControls обратился с жалобой к разработчикам DevelStudio, и набор компонентов был полностью удалён из среды, однако сохранился в уже существовавшей версии, удалить которую с форума в этот раз не представлялось возможным.<br/><br/>

                На момент 2012 года вышла последняя версия среды — 3.0.2, где появился новый набор компонентов, в том числе браузер Chromium вместо IE, что привлекло внимание веб-разработчиков и пользователей среды «Алгоритм». На тот момент компиляция программ в «Алгоритме» была платной, поэтому DevelStudio как новая и бесплатная среда разработки переманила на себя бо́льшую часть аудитории.<br/><br/>

                В 2014 году начались первые попытки по восстановлению среды, в этот раз со стороны сообщества. В конце 2018 года исходный код был восстановлен и доступен в GitHub.<br/><br/>

                В 2019 году сообщество обратилось к создателю DevelStudio с целью изменения политики распространения среды, вследствие чего она стала доступной для обновления и редактирования. Из-за жалоб на отсутствие ссылок на использованные библиотеки (DCEF, PHP4Delphi, TSizeCtrl, SynEdit) форум был удалён, а одна из страниц с описанием среды была перенаправлена на главную страницу сайта. С этого момента DevelStudio официально принадлежит сообществу.</p>
                <br/>
                <ul className="list">
                    <li>DevelNext (DN)</li>
                </ul>
                <br/>
                <p>Параллельно с этим главный разработчик DevelStudio начал создавать «реинкарнацию» предыдущей среды. Он взял за основу графическую библиотеку JavaFX, в результате вышла полностью новая среда, с поддержкой <a href="../CSS">CSS</a>, но без полной поддержки библиотеки Zend PHP — проект был основан на собственном языке jPHP. Его особенностью является, работа на JVM, JIT-компилятор, поддержка юникода, многопоточность и объектно-ориентированная стандартная библиотека.<br/>

                В 16-й версии среда DevelNext получила поддержку php 7, а параллельно с этим jPHP был расширен энтузиастом для разработки под ОС Android.<br/>

                На данный момент автор и энтузиасты трудятся над 2020 версией (ранее 17-я).</p>
                <br/>
                <ul className="list">
                    <li>PHPQt</li>
                </ul>
                <br/>
                <p>В 2015 году Александр Казанцев начал изучать алгоритмы разработки интерфейсов и создал расширение php_qml, что давало возможность использовать виджеты из библиотеки QT, но работало оно только под Windows.<br/><br/>

                С этого началась разработка PHPQt, первые версии не обратили особого внимания со стороны веб-разработчиков, поэтому автор начал углублённо улучшать расширение.<br/><br/>

                28 июля 2015 года был опубликован первый вариант компилятора проектов, на тот момент это был простой исполнитель скриптов(сценариев), который прикреплял php-код к стабу (подобно DevelStudio), и имел зависимость от Windows API, на этой стадии поддерживались уже почти все виджеты и многопоточность, была лёгкая оптимизация php-кода. С этого момента движок стали называть PQEngine,<br/><br/>

                3 августа 2016 года вышла пятая версия компилятора приложений (PqBuilder), что перешёл на базу PlastiQ и имел поддержку уже новейшего, на тот момент, php 7, проекты получили более полноценный компилятор и уже не требовали наличия PqEngine.dll вблизи с исполняемым файлом, вместо этого визуальные библиотеки стали добавляться динамично — как файлы, а не вшиваться в PQEngine.dll. Такой шаг был предпринят для совместимости с другими системами и оригинальными библиотеками Qt.<br/><br/>

                С появлением шестой версии проект стал дополнением для среды Qt Creator, а компилятор стал всего-навсего оптимизатором кода перед конечной сборкой программы. Появился полноценный редактор интерфейса, подсказки в редакторе кода и начала создаваться документация. С этого момента сделали анонс про создание среды PqStudio, но её разработка не зашла далеко.</p>
                <br />
                <ul className="list">
                    <li>WinForms PHP</li>
                </ul>
                <br/>
                <p>В 2018 году появился проект, объединяющий возможности Windows Forms (.NET Framework) и PHP 7. Его разработка медленными темпами ведётся и сейчас. На текущий момент в движке доступны практически все функции для ООП. Среда находится на стадии приватной разработки. К исполняемому файлу по умолчанию прилагается php7ts.dll.</p>
                <br />
                <ul className="list">
                    <li>Подключение PHP к проекту</li>
                </ul>
                <br/>
                <p>Также существуют расширения и для противоположного применения — подключения PHP к проекту на другом языке программирования: Phalanger (<a href="../CSharp">C#</a>, php с 5.4 по 7), Peachpie] (C#, php 7), PHP4Delphi (Lazarus, Delphi, <a href="../CSharp">C#</a>, C, C++, php 5.6, JPHP (Java, php 7.0), PHPly (<a href="../Python">Python</a>, php 5.6)</p>
                <br/>
                <br/>
                <h2>История</h2>
                <h3>PHP Tools, FI, Construction Kit</h3>
                <p>Разработка PHP началась в 1993 году когда датский программист Расмус Лердорф разработал на C набор CGI-скриптов для учёта посетителей его онлайн-резюме, обрабатывающий шаблоны <a href="../HTML">HTML</a>-документов. Лердорф назвал набор Personal Home Page Tools (Инструменты для личной домашней страницы). Вскоре функциональности перестало хватать, и Лердорф разработал новый интерпретатор шаблонов PHP/FI (англ. Personal Home Page / Forms Interpreter — «персональная домашняя страница / интерпретатор форм»).<br/><br/>

                8 июня 1995 года вышел Personal Home Page (PHP Tools) version 1.0 — первый публичный релиз с открытым исходным кодом. Эта новая реализация была способна взаимодействовать с базами данных и многое другое, что создавало фреймворк, с помощью которого пользователи могли создавать простые динамические веб-приложения.</p>
                <br/>
                <h3>PHP 2</h3>
                <p>В 1997 году после длительного бета-тестирования вышла вторая версия обработчика, написанного на C — PHP/FI 2.0. Её использовали всего 1 % (приблизительно 50 тысяч) всех интернет-доменов мира, так как к моменту выпуска языка в релиз, парсер языка был полностью переписан двумя программистами из Тель-Авива: Энди Гутмансом и Зивом Сураски.</p>
                <br/>
                <h3>PHP 3 и Zend Engine</h3>
                <p>Версия PHP 3.0 подверглась значительной переработке, определившей современный облик и стиль языка программирования. В 1997 году два израильских программиста, Энди Гутманс и Зеев Сураски, полностью переписали код интерпретатора. PHP 3.0 был официально выпущен в июне 1998 года.<br/><br/>

                Одной из сильнейших сторон PHP 3.0 была возможность расширения ядра дополнительными модулями. Впоследствии интерфейс написания расширений привлёк к PHP множество сторонних разработчиков, работающих над своими модулями, что дало PHP возможность работать с огромным количеством баз данных, протоколов, поддерживать большое число API. Большое количество разработчиков привело к быстрому развитию языка и стремительному росту его популярности. С этой версии акроним php расшифровывается как «PHP: hypertext Preprocessor», вместо устаревшего «Personal Home Page».<br/><br/>

                К зиме 1998 года, практически сразу после официального выхода PHP 3.0, Энди Гутманс и Зеев Сураски начали переработку ядра PHP. В задачи входило увеличение производительности сложных приложений и улучшение модульности базиса кода PHP. Новый движок, названный Zend Engine, успешно справлялся с поставленными задачами и впервые был представлен в середине 1999 года.</p>
                <br/>
                <h3>PHP 4</h3>
                <p><strong>PHP 4.0</strong>, основанный на движке Zend Engine и принёсший с собой набор дополнительных функций, официально вышел в мае 2000 года. В дополнение к улучшению производительности, PHP 4.0 имел ещё несколько ключевых нововведений, таких как поддержка сессий, буферизация вывода, более безопасные способы обработки вводимой пользователем информации и несколько новых языковых конструкций.</p>
                <br/>
                <h3>PHP 5</h3>
                <p><strong>PHP 5.0</strong>, вышел 13 июля 2004 года. Изменения включают обновление ядра Zend (Zend Engine 2), что существенно увеличило эффективность интерпретатора. Введена поддержка языка разметки XML. Полностью переработаны функции ООП, которые стали во многом схожи с моделью, используемой в Java. В частности, введён деструктор, открытые, закрытые и защищённые члены и методы, окончательные члены и методы, интерфейсы и клонирование объектов. В последующих версиях также были введены пространства имён, замыкания и целый ряд достаточно серьёзных изменений, количественно и качественно сравнимых с теми, которые появились при переходе на PHP 5.0.</p>
                <br/>
                <h3>PHP 6</h3>
                <p>Разработка <strong>PHP 6.0</strong> велась с октября 2006 года. Было сделано множество нововведений, как, например, исключение из ядра регулярных выражений POSIX и «длинных» суперглобальных массивов, удаление директив safe_mode, magic_quotes_gpc и register_globals из конфигурационного файла php.ini. Одним из основных новшеств должна была стать поддержка Юникода. Однако в марте 2010 года разработка PHP 6 была признана бесперспективной из-за сложностей с поддержкой Юникода. Исходный код PHP 6 перемещён на ветвь, а основной линией разработки стала версия 5.4.</p>
                <br/>
                <h3>PHP 7</h3>
                <p>В 2014 году было проведено голосование, по результатам которого следующая версия получила название <strong>PHP 7.0</strong>. Выход новой версии планировался в середине октября 2015 года. В марте 2015 года Zend представили инфографику, в которой описаны основные нововведения <strong>PHP 7</strong>.

                3 декабря 2015 года было объявлено о выходе PHP версии 7.0.0.<br/><br/>

                Новая версия основывается на экспериментальной ветви PHP, которая изначально называлась phpng (англ. PHP Next Generation «следующее поколение»), и разрабатывалась с упором на увеличение производительности и уменьшение потребления памяти. В новой версии добавлена возможность указывать тип возвращаемых из функции данных, добавлен контроль передаваемых типов для данных, а также новые операторы.<br/><br/>

                13 июня 2019 вышла версия <strong>PHP 7.4</strong>. В ядро были добавлены типизированные свойства и стрелочные функции, а также ограниченная ковариантность возвращаемого типа и контравариантность типа аргумента.</p>
                <br/>
                <h3>PHP 8.0</h3>
                <p><span className="code-mini">PHP версии 8.0</span> была выпущена 26 ноября 2020-го. Главными нововведениями стали: поддержка union-типов, JIT-компиляция и атрибуты (также известны как аннотации), как альтернатива конструкции switch было добавлено выражение match, также был добавлен новый оператор Nullsafe.<br/><br/>

                9 июля 2020 года Дэйл Хирт (англ. Dale Hirt), менеджер проекта PHP в Microsoft, в рассылке <span className="code-mini">php.internals</span> выпустил сообщение о том, что после выпуска версии PHP 8.0 Microsoft прекратит поддержку разработки этого языка программирования для Windows. Специалисты Microsoft занимались компиляцией бинарных версий интерпретатора для ОС Windows и тестированием их безопасности. В сообществе разработчиков PHP сообщили, что примут все необходимые меры, чтобы найти в ближайшее время альтернативный вариант для организации поддержки PHP 8.0 и выше для Windows, например, своими силами.<br/><br/>

                В ноябре 2025 года выйдет версия 8.5.</p>
                <br/>
                <br/>
                <h2>Синтаксис</h2>
                <p>Синтаксис PHP подобен синтаксису языка Си. Некоторые элементы, такие как ассоциативные массивы и цикл <span className="code-mini">foreach</span>, заимствованы из Perl.<br/><br/>

                Лексический анализ PHP осуществляется посредством утилиты re2c, утилита генерирует быстрые и легко встраиваемые лексеры.<br/><br/>

                Для написания простейшего скрипта не требуется описывать какие-либо переменные, используемые модули и т. п. Любой скрипт может начинаться непосредственно с оператора <span className="code-mini">{"<?php"}</span>, а заканчиваться оператором <span className="code-mini">{"?>"}</span>. Закрывающий оператор не обязателен и его рекомендуется опускать, чтобы избежать проблем с отправкой лишних символов в поток вывода после выполнения основного кода.<br/><br/>

                Простейшая программа Привестивие на PHP выглядит следующим образом:</p>
                <br/>
                <div className="code">
                {"<?php"}<br/><br/>

                echo 'Assalamu alaykum!';<br/><br/>
                </div>
                <br/>
                <p>Также возможен более короткий вариант вывода строки:</p>
                <br/>
                <div className="code">{"<?="}'Assalamu alaykum!'{"?>"}</div>
                <br/>
                <p>Открывающий тег вида <span className="code-mini">{"<?="}</span> используется для сокращённой записи конструкций, используемых для вывода строки.<br/><br/>

                Стоит обратить внимание, что хоть <span className="code-mini">{"<?="}</span> и является сокращённой формой <span className="code-mini">{"<?php echo"}</span>, однако не является «сокращённым тегом» (таким как <span className="code-mini">{"<?"}</span>). Сокращённые теги были помечены устаревшими и их использование крайне не рекомендуется, в отличие от <span className="code-mini">{"<?="}</span>, использование которого не будет вызывать проблем с совместимостью и переносимостью кода.<br/><br/>

               PHP исполняет код, находящийся внутри ограничителей, таких как <span className="code-mini">{"<?php ?>"}</span>. Всё, что находится вне ограничителей, выводится без изменений. В основном это используется для вставки PHP-кода в <a href="../HTML">HTML</a>-документ, например, так:</p>
               <br/>
               <div className="code">
               {"<html>"}<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"<head>"}<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"<title>"}Тестируем PHP{"</title>"}<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"</head>"}<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"<body>"}<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"<?php echo 'Ассаламу Алейкум!'; ?>"}<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"</body>"}<br/>
               {"</html>"}
               </div>
               <br/>
               <p>До версии 7.0 допускалось использование ограничителей языка программирования ASP <span className="code-mini">{"<% %>"}</span> и <span className="code-mini">{"<script language=\"php\"> </script>"}</span>. Работа сокращённых конструкций определяется в конфигурационном файле php.ini.<br/><br/>

               Имена переменных начинаются с символа <span className="code-mini">$</span>, тип переменной объявлять не нужно. Имена переменных и констант чувствительны к регистру символов. Имена классов, методов классов и функций к регистру символов не чувствительны. Переменные обрабатываются в строках, заключённых в двойные кавычки, и heredoc-строках (строках, созданных при помощи оператора {"<<<"}). Переменные в строках, заключённых в одинарные кавычки и nowdoc не обрабатываются.<br/><br/>

               Инструкции разделяются с помощью точки с запятой (<span className="code-mini">;</span>), за исключением некоторых случаев, после объявления конструкции if/else и циклов.<br/><br/>

               Переменные в функцию можно передавать как по значению, так и по ссылке (используется знак <span className="code-mini">&</span>).<br/><br/>

               PHP поддерживает три типа комментариев: в стиле языка Си (ограниченные <span className="code-mini">/* */</span>), C++ (начинающиеся с <span className="code-mini">//</span> и идущие до конца строки) и оболочки UNIX (с <span className="cod-mini">#</span> до конца строки).</p>
               <h3>Типы данных</h3>
               <p>PHP является языком программирования с динамической типизацией, не требующим указания типа при объявлении переменных, равно как и самого объявления переменных.<br/><br/>

               К скалярным типам данных относятся:<br/></p>
               <ul className="list">
                <li>целочисленный тип (int)</li>
                <li>число с плавающей точкой (float)</li>
                <li>логический тип (bool)</li>
                <li>строковый тип (string)</li>
               </ul>
               <br/>
               <p>К нескалярным типам относятся:<br/></p>
               <ul className="list">
                <li>массив (array)</li>
                <li>объект (object)</li>
                <li>внешний ресурс (resource)</li>
                <li>неопределённое значение (null)</li>
               </ul>
               <br/>
               <p>Диапазон целых чисел (int) в PHP зависит от платформы (для 32-битной архитектуры диапазон числа не превышает 32 бита, то есть, от −2 147 483 648 до 2 147 483 647). Числа можно задавать в десятичной, двоичной, восьмеричной и шестнадцатеричной системах счисления. Диапазон вещественных чисел (float) также зависит от платформы (для 32-битной архитектуры диапазон позволяет оперировать числами от ±1.7×10<span className="step">−308</span> до ±1.7×10<span className="step">+308</span>).<br/><br/>

               PHP предоставляет разработчикам логический тип (bool), способный принимать только два значения <span className="code-mini">true</span> («истина») и <span className="code-mini">false</span> («ложь»). При преобразовании в логический тип число 0, пустая строка, ноль в строке «0», <span className="code-mini">null</span> и пустой массив считаются равными <span className="code-mini">false</span>. Все остальные значения автоматически преобразуются в <span className="code-mini">true</span>.<br/><br/>

               Специальный тип <span className="code-mini">null</span> предназначен для переменных без определённого значения. Единственным значением данного типа является литерал <span className="code-mini">null</span>. Тип <span className="code-mini">null</span> принимают неинициализированные переменные, переменные инициализированные константой <span className="code-mini">null</span>, а также переменные, удалённые при помощи конструкции <span className="code-mini">unset()</span>.<br/><br/>

               Ссылки на внешние ресурсы имеют тип «ресурс» (resource). Переменные данного типа, как правило, представляют собой дескриптор, позволяющий управлять внешними объектами, такими как файлы, динамические изображения, результирующие таблицы базы данных и т. п. По мере развития языка стандартная библиотека постепенно дорабатывается и ресурсы заменяются объектами. Таким образом планируется полностью избавиться от этого типа.<br/><br/>

               Массивы (array) поддерживают числовые и строковые ключи и являются гетерогенными. Массивы могут содержать значения любых типов, включая другие массивы. Порядок элементов и их ключей сохраняется. Не совсем корректно называть php-массивы массивами, на самом деле это, скорее всего, упорядоченный хеш. Возможно неожиданное поведение при использовании цикла <span className="code-mini">for</span> со счётчиком вместо <span className="code-mini">foreach</span>. Так, например, при сортировке массива с численными индексами функциями из стандартной библиотеки, сортируются и ключи тоже.</p>
               <br/>
               <h4>Типизация</h4>
               <p>Язык допускает типизацию аргументов, возвращаемых значений функций и методов классов, а также, начиная с версии 7.4 типизацию полей классов. Включение <UrlProtocol url="en/language.types.declarations.php#language.types.declarations.strict" urlSiteDoc="https://www.php.net/manual/" text="строгого режима" />отключает неявные преобразования типов в данных участках кода, что приближает поведение языка к языкам со строгой типизацией.<br/><br/>

               Типы <span className="code-mini">int</span>, <span className="code-mini">string</span>, <span className="code-mini">float</span>, <span className="code-mini">bool</span>, <span className="code-mini">array</span>, <span className="code-mini">object</span> и некоторые другие являются допустимыми определениями типа аргумента, поля класса или возвращаемого значения. Также допускается использовать имена классов, либо интерфейсов для определения конкретной реализации. Использование<span className="code-mini">resource</span> для определения типа не допускается.<br/><br/>

               Современный PHP реализует базовую поддержку алгебраических типов данных и позволяет использовать как конъюнкцию, так и дизъюнкцию при определении типа. Язык не позволяет использовать псевдонимы типов, однако предоставляет несколько встроенных реализаций, которые в рамках PHP именуются «псевдотипами». Подобный термин в языке применяется к любому определению типа, который не является самостоятельным, применимым к значению, а реализован лишь как инструкция проверки типа в Zend VM (иногда применяется устоявшийся англицизм «тайп-хинт»).</p>
               <br/>
               <div className="code">
               // Для функции определён «псевдотип» mixed<br/>
               function example(): mixed<br/>
               {"{"}<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 42;<br/>
               {"}"}<br/><br/>

               $result = example();<br/>
               var_dump($result);<br/>
               // Однако фактический тип у переменной $result — это int
               </div>
               <br/>
               <div className="prew-terminal">
                <nav>
                    <ul>
                        <li>ConsoleDevWeb</li>
                        <li>rorrE_Text:...</li>
                        <li className="new"><p>+</p></li>
                    </ul>
                </nav>
                <div className="terminal">int(42)</div>
               </div>
               <br/>
               <p>К «псевдотипам» относятся:</p>
               <br/>
               <ul className="list">
                <li>К «псевдотипам» относятся:</li>
                <li>iterable (array или любой объект, реализующий интерфейс итератора).</li>
                <li>iterable (array или любой объект, реализующий интерфейс итератора).</li>
                <li>void <UrlProtocol text="возвращаемый" url="ru/language.types.declarations.php#language.types.declarations.return-only" urlSiteDoc="https://www.php.net/manual/"/> тип, означающий отсутствие возврата из функции</li>
                <li>never возвращаемый тип, означающий прерывание работы приложения</li>
                <li>self тип, требующий соответствие классу в рамках которого данный тип был определён.</li>
                <li>parent тип, требующий соответствие родительскому классу.</li>
                <li>static возвращаемый тип, требующий соответствие классу любого потомка.</li>
                <li>false и true типы (часть bool).</li>
               </ul>
               <br/>
               <p>Помимо проверок на соответствие типам встроенные «псевдотипы» могут реализовывать дополнительную логику проверок. Например, <span className="code-mini">callable</span> должен соответствовать (одному из):</p>
               <br/>
               <ul className="list">
                <li>анонимной функции;</li>
                <li>строкой, которая должна содержать имя функции;</li>
                <li>массивом где нулевой и первый элемент — строки (интерпретируется как название статической функции класса);</li>
                <li>массивом где нулевой элемент — объект, а первый — строка (интерпретируется как метод у объекта).</li>
               </ul>
               <br/>
               <h3>Функции</h3>
               <p>PHP поддерживает как объявление именованных функций, так и анонимных функций первого класса, например:</p>
               <br/>
               <div className="code">
               // Объявление именованной функции
               function get_salam(): string<br/>
               {"{"}<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Assalamu alaykum!';<br/>
               {"}"}<br/><br/>

               // Объявление анонимной функции<br/>
               $getSalam = function(): string<br/>
               {"{"}<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Assalamu alaykum!';<br/>
               {"}"};<br/><br/>

               // Короткий синтаксис<br/>
               $getSalam = fn(): string {"=>"} 'Assalamu alaykum!';
               </div>
               <br/>
               <p>Стоит обратить внимание, что в случае анонимных функций различие состоит не только в визуальных отличиях, но и в способе захвата переменных внешнего контекста. Любая «короткая» форма записи является замыканием, в то же время длинная запись для реализации замыкания требует явного указания переменных внутри оператора <span className="code-mini">use</span> из внешнего контекста для их захвата:<br/></p>
               <div className="code">
               $variable = 'Hello World!';<br/><br/>

               // Использование оператора use<br/>
               function() use ($variable): string<br/>
               {"{"}<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $variable;<br/>
               {"}"};<br/><br/>

               // Альтернативный вариант, используя короткий синтаксис<br/>
               fn(): string {"=>"} $variable;
               </div>
               <br/>
               <h3>Обращение к переменным и функциям</h3>
               <p>Обращение к переменным осуществляется с помощью символа $, за которым следует имя переменной. Данная конструкция может быть применена также для создания динамических переменных и функций.[63] Например:<br/></p>
               <div className="code">
               $a = 'I am a'; // Запись значения в переменную $a<br/>
               echo $a; // Вывод переменной $а<br/><br/>
               
               $b = 'a';<br/>
               echo $$b; // Вывод переменной $а (дополнительный $ перед переменной $b)<br/><br/>
               
               echo ${'a'}; // Вывод переменной $a<br/><br/>
               
               function_name(); // Вызов функции function_name<br/>
               $c = 'function_name';<br/>
               $c(); //Вызов функции function_name<br/><br/>
               
               $d = 'ClassName';<br/>
               $obj = new ClassName(); // Создание объекта класса ClassName<br/>
               $obj = new $d(); // Создание объекта класса ClassName<br/>
               $obj{"->"}b; // Обращение к свойству b объекта<br/>
               $obj{"->"}c(); // Вызов метода c() объекта<br/><br/>
               
               $obj{"->"}$b; // Обращение к свойству "a" объекта, так как $b = 'a'<br/>
               $obj{"->"}$c(); // Вызов метода function_name() объекта, так как $c = 'function_name'
               </div>
               <br/>
               <p>В PHP echo и print хоть и выглядят похоже на функции, однако первое является оператором[64], а второе выражением (то есть print возвращает значение, в отличие от echo). При их использовании можно опустить скобки.<br/></p>
               <div className="code">
                $array = [1, 2, 3];<br/><br/>

                array_walk($array, fn (int $value) {"=>"} print $value);<br/>
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>ConsoleWeb</li>
                            <li>{"php_is_..."}</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">123</div>
                </div>
                <br/>
                <div className="code">
                array_walk($array, fn (int $value) {"=>"} echo $value);<br/>
                // Ошибка: Syntax error, unexpected token "echo"<br/>
                // Так как тело коротких анонимных функций допускает только выражения.
                </div>
                <br/>
                <h3>Суперглобальные массивы</h3>
                <p>Суперглобальными массивами (англ. Superglobal arrays) в PHP называются предопределённые массивы, имеющие глобальную область видимости без использования директивы global. Большая часть этих массивов содержит входные данные запроса пользователя (параметры GET-запроса, поля форм при посылке методом POST, куки и т. п.).<br/><br/>

                Все суперглобальные массивы, кроме $GLOBALS и $_REQUEST, имеют устаревшие аналоги с длинными именами, которые доступны вплоть до версии 5.3. х (начиная с 5.4.0 были удалены). Таким образом, обращения $_GET['year'] и $HTTP_GET_VARS['year'] идентичны (за исключением области видимости: массивы с «длинными» именами не являются суперглобальными).<br/></p>
                <ul className="list">
                    <li><strong>
                           <span className="code-mini">$GLOBALS</span>
                        </strong><br/>
                        Массив всех глобальных переменных (в том числе и пользовательских).                    
                    </li>
                    <li><strong>
                        <span className="code-mini">$_SERVER</span>
                        (аналог для устаревшего — <span className="code-mini">$HTTP_SERVER_VARS</span>)
                        </strong><br/>
                        Содержит переменные окружения, которые операционная система передаёт серверу.</li>
                    <li><strong>
                        <span className="code-mini">$_ENV</span><br/>
                        (уст. <span className="code-mini">$HTTP_ENV_VARS</span>)
                        </strong><br/>
                        Текущие переменные среды (англ. Environment variables). Их набор специфичен для платформы, на которой выполняется скрипт.    
                    </li>
                    <li><strong><span className="code-mini">$_GET</span> (уст. <span className="code-mini">$HTTP_GET_VARS</span>)</strong><br/>
                    Содержит параметры GET-запроса, переданные в URI после знака вопроса «<span className="code-mini">?</span>».</li>
                    <li><strong><span className="code-mini">$_POST</span>(уст. <span className="code-mini">$HTTP_POST_VARS</span>)</strong><br/>
                    Ассоциативный массив значений полей <a href="../HTML">HTML</a>-формы при отправке методом POST. Индексы элементов соответствуют значению свойства name объектов (кнопки, формы, радиокнопки, флажки и т. д.) <a href="../HTML">HTML</a>-формы.
                    </li>
                    <li><strong><span className="code-mini">$_FILES</span> (уст. <span className="code-mini">$HTTP_POST_FILES</span>)</strong><br/>
                    Ассоциативный массив со сведениями об отправленных методом POST файлах. Каждый элемент имеет индекс, идентичный значению атрибута «name» в форме, и, в свою очередь, также является массивом со следующими элементами:<br/><br/>
                        <ul className="in-list">
                            <li><span className="code-mini">['name']</span> — исходное имя файла на компьютере пользователя.</li>
                            <li><span className="code-mini">['type']</span> — указанный агентом пользователя MIME-тип файла. PHP не проверяет его, и поэтому нет никаких гарантий, что указанный тип соответствует действительности.</li>
                            <li><span className="code-min">['size']</span> — размер файла в байтах.</li>
                            <li><span className="code-mini">['tmp_name']</span> — полный путь к файлу во временной папке. Файл необходимо переместить оттуда функцией <span className="code-mini">move_uploaded_file</span>. Загруженные файлы из временной папки PHP удаляет самостоятельно.</li>
                            <li><span className="code-mini">['error']</span> — код ошибки. Если файл удачно загрузился, то этот элемент будет равен 0 (<span className="code-mini">UPLOAD_ERR_OK</span>).</li>
                        </ul>
                    </li>
                    <li><strong><span className="code-mini">$_COOKIE</span> (уст. <span className="code-mini">$HTTP_COOKIE_VARS</span>)</strong><br/>
                    Aссоциативный массив с переданными агентом пользователя значениями куки.</li>
                    <li><strong><span className="code-mini">$_REQUEST</span></strong><br/>
                    Содержит элементы из массивов <span className="code-mini">$_GET</span>, <span className="code-mini">$_POST</span>, <span className="code-mini">$_COOKIE</span>. С версии PHP 4.1 включает <span className="code-mini">$_FILES</span>.</li>
                    <li><strong><span className="code-mini">$_SESSION</span> (уст. <span className="code-mini">$HTTP_SESSION_VARS</span>)</strong><br/>
                    Содержит данные сессии.</li>
                </ul>
                <br/>
                <h3>Объектно-ориентированное программирование</h3>
                <p>Ключевое слово <span className="code-mini">class</span> было зарезервировано ещё в третьей версии языка. В четвёртой версии стало возможно создавать классы и объекты на их основе. Однако принципы ООП поддерживались лишь частично, так например, все члены (переменные и методы) были открыты. К тому же создание объектов было дорогой операцией и работало медленно.<br/><br/>

                Начиная с пятой версии PHP обладает полной поддержкой ООП. Работа с классами была оптимизирована и теперь такой код работает достаточно быстро.<br/><br/>

                Класс в PHP объявляется с помощью ключевого слова <span className="code-mini">class</span>. Методы и свойства класса могут быть общедоступными (<span className="code-mini">public</span>, по умолчанию), защищёнными (<span className="code-mini">protected</span>) и скрытыми (<span className="code-mini">private</span>). PHP поддерживает все три основных механизма ООП — инкапсуляцию, полиморфизм подтипов и наследование (родительский класс указывается с помощью ключевого слова <span className="code-mini">extends</span> после имени класса). Поддерживаются интерфейсы (ставятся в соответствие с помощью <span className="code-mini">implements</span>). Разрешается объявление финальных, абстрактных методов и классов. Множественное наследование классов не поддерживается, однако класс может реализовывать несколько интерфейсов. Для обращения к методам родительского класса используется ключевое слово <span className="code-mini">parent</span>.<br/><br/>

                Начиная с версии 5.4.0 множественное наследование может быть реализовано с помощью механизма особенностей (<span className="code-mini">trait</span>). Особенности похожи на примеси (<span className="code-mini">mixins</span>), за исключением того что для них нельзя напрямую создать экземпляр. Повторное использование кода заключено в использовании кода особенности в нескольких классах. Допускается использовать в одном классе несколько особенностей. Механизм особенностей имеет средства разрешения конфликтов имён. При запуске программы код особенности будет «вкомпилирован» в код содержащего его класса.<br/><br/>

                Классы в PHP имеют ряд «магических» методов (<span className="code-mini">magic methods</span>), начинающихся с двух символов подчёркивания — конструктор (<span className="code-mini">__construct()</span>, в версиях до 5.0 конструктором служил метод, одноимённый с классом) и деструктор (<span className="code-mini">__destruct()</span>), а также методы чтения (<span className="code-mini">__get()</span>) и записи (<span className="code-mini">__set()</span>), свёртывания (<span className="code-mini">__sleep()</span>) и развёртывания (<span className="code-mini">__wakeup()</span>), клонирования (<span className="code-mini">__clone()</span>) и др. Эти методы являются достаточно гибким инструментом: переопределяя их, можно добиться существенного изменения поведения объекта.<br/><br/>

                Все функции-члены реализованы виртуальными и потому все они являются методами.<br/><br/>

                Экземпляры класса создаются с помощью ключевого слова new, обращение к полям и методам объекта производится с использованием оператора {"->"}. Для доступа к членам класса из его методов используется переменная <span className="code-mini">$this</span>.<br/></p>
                <div className="code">
                class C1 extends C2 implements I1, I2<br/>
                {"{"}<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private int $a;<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int $b;<br/><br/>

                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public function __construct(int $a, int $b)<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"{"}<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent::__construct($a, $b);<br/><br/>

                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this{"->"}a = $a;<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this{"->"}b = $b;<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"}"}<br/><br/>

                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public function plus(): int<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"{"}<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $this{"->"}a + $this{"->"}b;<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"}"}<br/><br/>
    
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* ............... */<br/>
                {"}"}<br/><br/>

                $d = new C1(1, 2);<br/>
                echo $d{"->"}plus(); 
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>ConsoleWeb</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">3</div>
                </div>
                <br/>
                <p>Начиная с пятой версии PHP объекты передаются по указателю:</p>
                <br/>
                <div className="code">
                class A<br/>
                {"{"}<br/>
                public string $color = 'red';<br/>
                {"}"}<br/><br/>

                $a = new A();<br/>
                echo $a{"->"}color; <br/>
                $b = $a;<br/>
                $b{"->"}color = 'blue';<br/>
                echo $a{"->"}color;
                </div>
                <br/>
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>ConsoleWeb</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">
                        red<br/>
                        blue
                    </div>
                </div><br/>
                <p>Иногда также можно встретить упоминание, что объекты передаются по ссылке, однако это не так. Так как в PHP отсутствует понятие «указателя», то может применяться терминология «передачи по ссылке» в контексте передачи объектов в качестве аргументов функций или методов из-за схожести поведения. Отличия между передачей объектов по ссылке и по указателю выглядят следующим образом:<br/></p>
                <div className="code">
                class A {}<br/><br/>

                function by_pointer(A $object): void<br/>
                {"{"}<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$object = 42;
                {"}"}<br/><br/>

                function by_reference(A &$object): void<br/>
                {"{"}<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$object = 42;<br/>
                {"}"}<br/><br/>

                $object = new A();<br/><br/>

                // Передача по указателю<br/>
                by_pointer($object);<br/>
                var_dump($object); // object(A) {}<br/><br/>

                // Передача по ссылке<br/>
                by_reference($object);<br/>
                var_dump($object); 
                </div>
                <br />
                <div className="prew-terminal">
                    <nav>
                        <ul>
                            <li>ConsoleWeb</li>
                            <li className="new"><p>+</p></li>
                        </ul>
                    </nav>
                    <div className="terminal">int(42)</div>
                </div>
                <br/>
                <p><strong>«Paamayim Nekudotayim»</strong> или просто «двойное двоеточие». Используя эту лексему, программист может обращаться к константам, статическим или перегруженным свойствам или методам класса. При обращении к этим элементам извне класса программист должен использовать имя этого класса. «Paamayim Nekudotayim» на первый взгляд может показаться странным словосочетанием для обозначения двойного двоеточия. Однако во время создания Zend Engine версии 0.5 (который входил в PHP3), Andi и Zeev выбрали именно это обозначение. «Paamayim Nekudotayim» действительно значит «двойное двоеточие» (дословно: «два раза двоеточие») на иврите. Это обозначение не менялось ни разу в течение всего времени разработки PHP.</p><br/>
                <div className="code">
                class MyClass <br/>
                {"{"}<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public const CONST_VALUE = 'Значение константы';<br/>
                {"}"}<br/>
                // Использование :: вне объявления класса<br/>
                echo MyClass::CONST_VALUE;
                </div>
                <br/>
                <h2>Особенности интерпретатора</h2>
                <p>PHP-скрипты обычно обрабатываются интерпретатором в порядке, обеспечивающем кроссплатформенность разработанного приложения:</p>
                <ol className="list-numbers">
                    <li>лексический анализ исходного кода и генерация лексем,</li>
                    <li>синтаксический анализ полученных лексем,</li>
                    <li>генерация опкода для виртуальной машины (разновидность байт-кода),</li>
                    <li>оптимизация (например DCE),</li>
                    <li>выполнение опкода интерпретатором (без создания исполняемого файла), либо JIT-компиляция результата с последующим выполнением (для включения JIT требуется специальный флаг в настройках интерпретатора).</li>
                </ol>
                <p>Раньше, для увеличения быстродействия приложений было возможно использование специального программного обеспечения, так называемых акселераторов. Принцип их работы заключается в кэшировании однажды сгенерированного байт-кода в памяти и/или на диске, таким образом, из процесса работы приложения исключаются этапы 1—3, что в общем случае ведёт к значительному ускорению работы. Начиная с версии 5.5 одна из разновидностей акселераторов, opcache, была встроена в ядро, поэтому сторонние решения больше не пользуются популярностью.<br/><br/>

                Важной особенностью является то, что разработчику нет необходимости заботиться о распределении и освобождении памяти. Ядро PHP реализует средства для автоматического управления памятью; вся выделенная память возвращается системе после завершения работы скрипта.</p>
                <br/>
                <h3>Расширения</h3>
                <p>Интерпретатор состоит из ядра и подключаемых модулей, «расширений», представляющих собой динамические библиотеки. Расширения позволяют дополнить базовые возможности языка, предоставляя возможности для работы с базами данных, сокетами, динамической графикой, криптографическими библиотеками, документами формата PDF и тому подобным. Любой желающий может разработать своё собственное расширение и подключить его. Существует огромное количество расширений, как стандартных, так и созданных сторонними компаниями и энтузиастами, однако в стандартную поставку входит лишь несколько десятков хорошо зарекомендовавших себя. Множество расширений доступно в репозитории PECL.<br/><br/>

                Начиная с версии 7.4.0 в PHP была добавлена поддержка интерфейса внешних функций (FFI), что в значительной степени упростило взаимодействие с библиотеками, написанными на любом другом языке (включая API, предоставляемое операционной системой). Этот новый функционал, в свою очередь, предоставил альтернативу написанию расширений. Таким образом, используя FFI можно писать код на языке PHP и взаимодействовать с любыми библиотеками в системе, которые предоставляют <span className="code-mini">cdecl</span>, <span className="code-mini">fastcall</span> или <span className="code-mini">stdcall</span> ABI.</p>
                <br/>
                <h3>Параметры настройки</h3>
                <p>Интерпретатор PHP имеет специальный конфигурационный файл — <span className="code-mini">php.ini</span>, содержащий множество настроек, изменение которых влияет на поведение интерпретатора. Имеется возможность отключить использование ряда функций, изменить ограничения на используемую скриптом оперативную память, время выполнения, объём загружаемых файлов, настроить журналирование ошибок, работу с сессиями и почтовыми сервисами, подключить дополнительные расширения, а также многое другое. Возможно дробление большого конфигурационного файла на части. Например, широко распространена практика вынесения настроек расширений в отдельные файлы. Параметры интерпретатора могут быть переопределены в файлах конфигурации HTTP-сервера (например, <span className="code-mini">.htaccess</span> в Apache) или в самом скрипте во время выполнения при помощи команды <span className="code-mini">ini_set</span>.</p>
                <br/>
                <h3>Режимы запуска интерпретатора (SAPI)</h3>
                <p>SAPI — это внешний уровень абстракции, предназначенный для встраивания интерпретатора в другие приложения и отвечает за его работу (запуск, остановка, передача скриптов на исполнение, доступ к внешним данным). Существует несколько основных SAPI, определяющих способы запуска и использования PHP:<br/></p>
                <ol className="list-numbers">
                    <li>В качестве модуля к веб-серверу (например, для Apache модуль <span className="code-mini">mod_php</span>). В этом случае интерпретатор PHP выполняется в окружении процесса веб-сервера. Веб-сервер управляет количеством запущенных процессов PHP и сообщает им, какие скрипты требуется исполнить.<br/><br/></li>
                    <li>CGI SAPI. Использование CGI подразумевает запуск нового процесса для обработки каждого запроса. Для исполнения PHP-скрипта веб-сервер запускает <span className="path">./php-cgi /path/to/script.php</span>. Сам принцип такого использования подразумевает, что интерпретатор PHP исполняет только один скрипт, после чего заканчивает свою работу. Затраты на запуск процесса интерпретатора и его инициализацию очень часто сопоставимы или даже превышают затраты на исполнение PHP-скрипта. Для решения этой проблемы в CGI SAPI был введён режим FastCGI. В этом режиме PHP-интерпретатор запускается как независимый сервер, обрабатывающий входящие запросы на исполнение PHP-скриптов по протоколу FastCGI, что позволяет ему работать с любым веб-сервером, поддерживающим этот протокол.<br/><br/></li>
                    <li>FPM SAPI, известный как php-fpm — это другая реализация протокола FastCGI. Создан изначально Андреем Нигматулиным как отдельный патч для использования в социальной сети Badoo. Данная реализация решала ряд проблем, которые мешали использованию CGI/FastCGI SAPI. В частности, появилась возможность перезапуска пула интерпретаторов PHP без потери запросов, запуск нескольких пулов под разными пользователями, аварийный перезапуск интерпретаторов в случае проблем с ними и ещё несколько приятных дополнений. В дальнейшем над патчем работали несколько человек, был добавлен режим динамического управления числом запущенных процессов PHP (по принципу управления числом процессов в веб-сервере Apache), и начиная с версии PHP 5.3.3 php-fpm был включён в PHP как отдельное SAPI.<br/><br/></li>
                    <li>В качестве скрипта командной строки (CLI SAPI), являющегося исполняемым файлом, который вызывается пользователем из командной строки; скрипт выполняется в окружении вызвавшего пользователя. В этом случае возможно использование PHP для создания клиентских GUI-приложений[73] и решения административных задач в операционных системах UNIX, Linux, Microsoft Windows, Mac OS X и AmigaOS. Однако в таком качестве он не получил распространения, отдавая пальму первенства Perl, Python и VBScript.</li>
                </ol>
                <p>Начиная с версии PHP 5.4.0 в CLI SAPI появилась возможность запуска PHP как отдельного HTTP-сервера. Однако этот режим предназначен исключительно для разработки, так как запускает только один процесс интерпретатора и выполняет все запросы исключительно последовательно.</p>
                <br/>
                <h3>Альтернативные реализации</h3>
                <p>В силу популярности языка PHP и желания увеличить быстродействие основанных на нём веб-приложений создано несколько альтернативных компиляторов, близких к PHP-языку. Так в феврале 2010 года компания Facebook открыла свой компилятор PHP — HipHop (HPHP, Hyper-PHP) генерирующий код на C++, с последующей компиляцией в машинный код с помощью gcc. В июле 2013 года российская компания ВКонтакте анонсировала похожий продукт — KPHP.<br/><br/>

                В таблице представлен список существующих на сегодняшний момент альтернативных реализаций.</p>
                <br/>
                <table>
                    <tr>
                        <th>Название</th>
                        <th>Версия PHP (примерно)</th>
                        <th>Лицензия</th>
                        <th>Результат компиляции</th>
                    </tr>
                    <tr>
                        <td>KPHP</td>
                        <td>7.4</td>
                        <td>GPL</td>
                        <td>C++, машиный код</td>
                    </tr>
                    <tr>
                        <td>HipHop</td>
                        <td>5.4</td>
                        <td>PHP License</td>
                        <td>C++, машиный код</td>
                    </tr>
                    <tr>
                        <td>Quercus (в составе веб-сервера Resin)</td>
                        <td>5.2</td>
                        <td>Ms SS-PL (Shared source)</td>
                        <td>Microsoft IL</td>
                    </tr>
                    <tr>
                        <td>PHC</td>
                        <td>5.2</td>
                        <td>BSDL</td>
                        <td>C, машинный код</td>
                    </tr>
                    <tr>
                        <td>Pipp</td>
                        <td>5.3</td>
                        <td>Artistic License и GNU GPL</td>
                        <td>Parrot</td>
                    </tr>
                    <tr>
                        <td>JPHP</td>
                        <td>7.1 (частично 7.2, 7.3 и 7.4)</td>
                        <td>Apache 2.0</td>
                        <td>JVM</td>
                    </tr>
                    <tr>
                        <td>PHPPHP</td>
                        <td>5.4</td>
                        <td>MIT</td>
                        <td>PHP</td>
                    </tr>
                    <tr>
                        <td>PH7</td>
                        <td>5.4</td>
                        <td>Своя (Symisc Public License)</td>
                        <td>C, машинный код</td>
                    </tr>
                    <tr>
                        <td>HippyVM</td>
                        <td>5.6</td>
                        <td>MIT</td>
                        <td>RPython/PyPy</td>
                    </tr>
                </table>
                <p>На сайте phpclasses.org доступен сравнительный анализ некоторых компиляторов.</p>
                <br/>
                <h2>Стандартные рекомендации PHP</h2>
                <p>Стандартные рекомендации PHP (англ. PHP Standard Recommendation, сокр. PSR) — это спецификация PHP, которая разрабатывается, принимается и публикуется группой авторитетных PHP проектов в том числе CakePHP, Composer, Joomla, PEAR, Phalcon, phpDocumentor, TYPO3, Yii framework[86]. Спецификация служит стандартизацией концепций программирования на языке PHP и основана на реальном опыте, а также на исследованиях и экспериментах. Цель рекомендаций состоит в том, чтобы обеспечить совместимость компонентов веб-приложений разработанных разными разработчиками.</p>
                <br/>
                <h2>Критика</h2>
                <p>Сторонники языка PHP в качестве основных его преимуществ называют широкую распространённость, востребованность PHP-разработчиков на рынке труда и простоту изучения. К достоинствам языка относится и его достаточно быстрая эволюция.</p>
                <br/>
                <h3>Отсутствие поддержки многобайтовых кодировок в ядре языка</h3>
                <p>Поддержка строк с многобайтовыми кодировками (такими как UTF-8) реализуется через отдельные расширения mbstring и iconv, на уровне ядра поддержка отсутствует, однако с версии PHP 4.2.0 есть возможность переопределять стандартные функции работы со строками, подменяя их на аналоги из mbstring. Поддержка многобайтовых кодировок во всех строковых функциях стала доступна с версии 5.4.0 (март 2012 года).</p>
                <br/>
                <h3>Отсутствие поддержки многопоточности</h3>
                <p>В языке не предусмотрена возможность создания многопоточных приложений и отсутствует поддержка синхронизированного доступа к ресурсам, однако реализуема при помощи расширения PCNTL (от англ. process control), но оно не подходит для решения специфических задач.<br/><br/>

                Хотя есть возможность установить расширение pthreads для «честных» потоков, но для этого интерпретатор должен быть скомпилирован с флагом thread safety, а само расширение признано устаревшим в пользу parallel (от того же автора).<br/><br/>

                В качестве более современной альтернативы возможно использование расширения Swoole.</p>
            </div>
        </div>
    )
}