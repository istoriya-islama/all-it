import Cover from '../../../Components/js/Cover'
import ImageBlock from "../../../Components/js/ImageBlock"

export const metadata = {
    title: 'JavaScript',
    description: 'Язык програмирование JavaScript',
}

export default function JavaScript() {
    return <div>
        <Cover title="Все о Программировании" namePage="JavaScript" image="/allIt.jpg" isShowBtn={false}/>
        <div className="text">
            <q>JavaScript (англ. /ˈdʒɑːvəskrɪpt/; аббр. JS) — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. Является реализацией спецификации ECMAScript (стандарт ECMA-262).<br/><br/>

            JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам.<br/><br/>

            Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса.<br/><br/>

            На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java. Языком JavaScript не владеет какая-либо организация или компания, что отличает его от ряда языков программирования, используемых в веб-разработке.<br/><br/>

            Название «JavaScript» является зарегистрированным товарным знаком корпорации Oracle в США.<br/><br/>

            В 1992 году компания Nombas (впоследствии приобретённая Openwave) начала разработку встраиваемого скриптового языка Cmm (Си-минус-минус), который, по замыслу разработчиков, должен был стать достаточно мощным, чтобы заменить макросы, сохраняя при этом схожесть с Си, чтобы разработчикам не составляло труда изучить его. Главным отличием от Си была работа с памятью. В новом языке всё управление памятью осуществлялось автоматически: не было необходимости создавать буфера, объявлять переменные, осуществлять преобразование типов. В остальном языки сильно походили друг на друга: в частности, Cmm поддерживал стандартные функции и операторы Си. Cmm был переименован в ScriptEase, поскольку исходное название звучало слишком негативно, а упоминание в нём Си «отпугивало» людей. На основе этого языка был создан проприетарный продукт CEnvi. В конце ноября 1995 года Nombas разработала версию CEnvi, внедряемую в веб-страницы. Страницы, которые можно было изменять с помощью скриптового языка, получили название Espresso Pages — они демонстрировали использование скриптового языка для создания игры, проверки пользовательского ввода в формы и создания анимации. Espresso Pages позиционировались как демоверсия, призванная помочь представить, что случится, если в браузер будет внедрён язык Cmm. Работали они только в 16-битовом Netscape Navigator под управлением Windows.<br/><br/>

            Самая первая реализация JavaScript была создана Бренданом Эйхом (англ. Brendan Eich) в компании Netscape, и с тех пор обновляется, чтобы соответствовать ECMA-262 Edition 5 и более поздним версиям. Этот движок называется SpiderMonkey и реализован на языке C/C++. Движок Rhino создан Норрисом Бойдом (англ. Norris Boyd) и реализован на языке Java. Как и SpiderMonkey, Rhino соответствует ECMA-262 Edition 5.</q>
            <br/>
            <h2>История</h2>
            <p>Перед Бренданом Эйхом, нанятым в компанию Netscape 4 апреля 1995 года, была поставлена задача внедрить язык программирования Scheme или что-то похожее в браузер Netscape. Поскольку требования были размыты, Эйха перевели в группу, ответственную за серверные продукты, где он проработал месяц, занимаясь улучшением протокола HTTP. В мае разработчик был переброшен обратно, в команду, занимающуюся клиентской частью (браузером), где он немедленно начал разрабатывать концепцию нового языка программирования. Менеджмент разработки браузера, включая Тома Пакина (англ. Tom Paquin), Михаэля Тоя, Рика Шелла (англ. Rick Schell), был убеждён, что Netscape должен поддерживать язык программирования, встраиваемый в HTML-код страницы.<br/><br/>
            
            Помимо Брендана Эйха, в разработке участвовали сооснователь Netscape Communications Марк Андрессен и сооснователь Sun Microsystems Билл Джой: чтобы успеть закончить работы над языком к релизу браузера, компании заключили соглашение о сотрудничестве в разработке. Они ставили перед собой цель обеспечить «язык для склеивания» составляющих частей веб-ресурса: изображений, плагинов, Java-апплетов, который был бы удобен для веб-дизайнеров и программистов, не обладающих высокой квалификацией.

            Первоначально по предложению Марка Андрессена язык был назван Mocha, был реализован Бренданом Эйхом в течение десяти дней и впервые был включен в пре-альфу версию Netscape 2. Затем он был переименован в LiveScript и предназначался как для программирования на стороне клиента, так и для программирования на стороне сервера (там он должен был называться LiveWire). На синтаксис оказали влияние языки Си и Java, и, поскольку Java в то время было модным словом, 4 декабря 1995 года LiveScript переименовали в JavaScript, получив соответствующую лицензию у Sun. Анонс JavaScript со стороны представителей Netscape и Sun состоялся накануне выпуска второй бета-версии Netscape Navigator. В нём декларируется, что 28 лидирующих ИТ-компаний выразили намерение использовать в своих будущих продуктах JavaScript как объектный скриптовый язык с открытым стандартом.<br/><br/>

            В 1996 году компания Microsoft выпустила аналог языка JavaScript, названный JScript. Анонсирован этот язык был 18 июля 1996 года. Первым браузером, поддерживающим эту реализацию, был Internet Explorer 3.0.<br/><br/>

            По инициативе компании Netscape была проведена стандартизация языка ассоциацией ECMA. Стандартизированная версия имеет название ECMAScript, описывается стандартом ECMA-262. Первой версии спецификации соответствовал JavaScript версии 1.1, а также языки JScript и ScriptEasy.</p>
            <br/>
            <h3>Популярность</h3>
            <p>В статье «The World’s Most Misunderstood Programming Language Has Become the World’s Most Popular Programming Language» (с англ. — «Самый неправильно понятый язык программирования в мире стал самым популярным в мире языком программирования») Дуглас Крокфорд утверждает, что лидирующую позицию JavaScript занял в связи с развитием AJAX, поскольку браузер стал превалирующей системой доставки приложений.<br/><br/>

            Согласно TIOBE Index, базирующемуся на данных поисковых систем Google, MSN, Yahoo!, Википедия и YouTube, в 2024 году JavaScript находился на 6-м месте.</p>
            <br/>
            <table>
                <tr>
                    <th>Год</th>
                    <th>Положение JavaScript в TIOBE Index</th>
                </tr>
                <tr>
                    <td>2000</td>
                    <td>7</td>
                </tr>
                <tr>
                    <td>2005</td>
                    <td>10</td>
                </tr>
                <tr>
                    <td>2010</td>
                    <td>9</td>
                </tr>
                <tr>
                    <td>2015</td>
                    <td>8</td>
                </tr>
                <tr>
                    <td>2020</td>
                    <td>7</td>
                </tr>
                <tr>
                    <td>2025</td>
                    <td>6</td>
                </tr>
            </table>
            <br/>
            <p>В рейтинге популярности IEEE Spectrum в 2024 году JavaScript занял третье место.<br/><br/>

            JavaScript является самым популярным языком программирования, используемым для разработки веб-приложений на стороне клиента.</p>
            <br/>
            <h2>Возможности языка</h2>
            <p>JavaScript является объектно-ориентированным языком, но используемое в языке прототипирование обуславливает различия в работе с объектами по сравнению с традиционными класс-ориентированными языками. Кроме того, JavaScript имеет ряд свойств, присущих функциональным языкам — функции как объекты первого класса, объекты как списки, карринг, анонимные функции, замыкания — что придаёт языку дополнительную гибкость.<br/><br/>

            Несмотря на схожий с Си синтаксис, JavaScript по сравнению с языком Си имеет коренные различия:</p>
            <br/>
            <ul className="list">
                <li>объекты с возможностью интроспекции;</li>
                <li>функции как объекты первого класса;</li>
                <li>автоматическое приведение типов;</li>
                <li>автоматическая сборка мусора;</li>
                <li>анонимные функции.</li>
            </ul>
            <br/>
            <p>В языке отсутствуют такие полезные вещи, как:</p>
            <br/>
            <ul className="list">
                <li>стандартная библиотека: в частности, отсутствует интерфейс программирования приложений по работе с файловой системой, управлению потоками ввода-вывода, базовых типов для бинарных данных;</li>
                <li>стандартные интерфейсы к веб-серверам и базам данных;</li>
                <li>система управления пакетами[~ 2], которая бы отслеживала зависимости и автоматически устанавливала их.</li>
            </ul>
            <br/>
            <br/>
            <h2>Семантика и синтаксис</h2>
            <p>Синтаксис языка JavaScript во многом напоминает синтаксис Си и Java, семантически же язык гораздо ближе к Self, Smalltalk или даже Лиспу[Спецификация 2].<br/><br/>

            В JavaScript:</p>
            <ul className="list">
                <li>все идентификаторы регистрозависимы,</li>
                <li>в названиях переменных можно использовать буквы, подчёркивание, символ доллара, арабские цифры,</li>
                <li>названия переменных не могут начинаться с цифры,</li>
                <li>для оформления однострочных комментариев используются <span className="code-mini">//</span>, многострочные и внутристрочные комментарии начинаются с <span className="code-mini">/*</span> и заканчиваются <span className="code-mini">*/</span>.</li>
            </ul>
            <br/>
            <br/>
            <h3>Структура языка</h3>
            <p>Структурно JavaScript можно представить в виде объединения трёх чётко различимых друг от друга частей:</p>
            <br/>
            <ul className="list">
                <li>ядро (ECMAScript),</li>
                <li>объектная модель браузера (Browser Object Model или BOM).</li>
                <li>объектная модель документа (Document Object Model или DOM).</li>
            </ul>
            <br/>
            <p>Если рассматривать JavaScript в отличных от браузера окружениях, то объектная модель браузера и объектная модель документа могут не поддерживаться.<br/><br/>

            Объектную модель документа иногда рассматривают как отдельную от JavaScript сущность[Спецификация 3], что согласуется с определением DOM как независимого от языка интерфейса документа. В противоположность этому ряд авторов находит BOM и DOM тесно взаимосвязанными.</p>
            <br/>
            <h4>Ядро</h4>
            <p>ECMAScript не является браузерным языком и в нём не определяются методы ввода и вывода информации. Это, скорее, основа для построения скриптовых языков. Спецификация ECMAScript описывает типы данных, инструкции, ключевые и зарезервированные слова, операторы, объекты, регулярные выражения, не ограничивая авторов производных языков в расширении их новыми составляющими.</p>
            <br/>
            <h4>Объектная модель браузера</h4>
            <p>Объектная модель браузера — браузер-специфичная часть языка, являющаяся прослойкой между ядром и объектной моделью документа. Основное предназначение объектной модели браузера — управление окнами браузера и обеспечение их взаимодействия. Каждое из окон браузера представляется объектом window, центральным объектом DOM. Объектная модель браузера на данный момент не стандартизирована, однако спецификация находится в разработке WHATWG[Спецификация 4] и [Спецификация 5].

            Помимо управления окнами, в рамках объектной модели браузера браузерами обычно обеспечивается поддержка следующих сущностей:</p>
            <br/>
            <ul className="list">
                <li>управление фреймами,</li>
                <li>поддержка задержки в исполнении кода и зацикливания с задержкой,</li>
                <li>системные диалоги,</li>
                <li>управление адресом открытой страницы,</li>
                <li>управление информацией о браузере,</li>
                <li>управление информацией о параметрах монитора,</li>
                <li>ограниченное управление историей просмотра страниц,</li>
                <li>поддержка работы с HTTP cookie.</li>
            </ul>
            <br/>
            <br/>
            <h4>Объектная модель документа</h4>
            <p>Объектная модель документа — интерфейс программирования приложений для HTML и XML-документов. Согласно DOM, документ (например, веб-страница) может быть представлен в виде дерева объектов, обладающих рядом свойств, которые позволяют производить с ним различные манипуляции:</p>
            <br/>
            <ul className="list">
                <li>генерация и добавление узлов,</li>
                <li>получение узлов,</li>
                <li>изменение узлов,</li>
                <li>изменение связей между узлами,</li>
                <li>удаление узлов.</li>
            </ul>
            <br/>
            <br/>
            <h3>Встраивание в веб-страницы</h3>
            <h4>Расположение внутри страницы</h4>
            <p>Для добавления JavaScript-кода на страницу можно использовать теги <span className="code-mini">{"<script></script>"}</span>[Спецификация 6], которые рекомендуется, но не обязательно, помещать внутри контейнера <span className="code-mini">{"<head>"}</span>. Контейнеров <span className="code-mini">{"<script>"}</span> в одном документе может быть сколько угодно. Атрибут <span className="code-mini">type="text/javascript"</span> указывать необязательно, данное значение используется по умолчанию.<br/><br/>

            Скрипт, выводящий модальное окно с классической надписью «Assalamu Aleykum!» внутри браузера:</p>
            <br/>
            <div className="code">
                {"<script type=\"application/javascript\">"}<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Assalamu Aleykum!');<br/>
                {"</script>"}<br/>
            </div>
            <br/>
            <div className="prew-brow">
                <nav>
                    <ul>
                        <li>JavaScript_Document</li>
                        <li className='new'><p>+</p></li>
                    </ul>
                </nav>
                <div className="brow">
                    <div className="alert-js">
                        <button className='exit'>X</button>
                        Assalamu Aleykum!
                    </div>
                </div>
            </div>
            <br/>
            <br/>
            <h4>Расположение внутри тега</h4>
            <p>Спецификация HTML описывает набор атрибутов, используемых для задания обработчиков событий[Спецификация 7]. Пример использования:</p>
            <br/>
            <div className="code">
                {"<a href=\"https://t.me/+I7VeJtnyLN8xNDFk\" onclick=\"return confirm('Вы уверены?')\">"}
                Удалить
                {"</a>"}<br/>
                {"<!--"}но у нас это не будет работать, сами про тестируйте на своем документ HTML, иза этого там конопка удлаить сразу будет делать своё дестивие{"-->"}<br/>
                {"<!--"}а ты в этом коде нашел что-то не так в нём?{"-->"}
            </div>
            <br/>
            <div className="prew-brow">
                <nav>
                    <ul>
                        <li>JavaScript_Document</li>
                        <li className='new'><p>+</p></li>
                    </ul>
                </nav>
                <div className="brow">
                   <a href="https://t.me/+I7VeJtnyLN8xNDFk">Удалить</a>
                </div>
            </div>
            <br/>
            <p>В приведённом примере при нажатии на ссылку функция <span className="code-mini">confirm('Вы уверены?');</span> вызывает модальное окно с надписью «Вы уверены?», а <span className="code-mini">return false;</span> блокирует переход по ссылке. Этот код будет работать только если в браузере есть и включена поддержка JavaScript, иначе переход по ссылке произойдёт без предупреждения.<br/><br/>

            Использование кода JavaScript в контексте разметки страницы расценивается в рамках ненавязчивого JavaScript как плохая практика. Аналогом (при условии снабжения ссылки идентификатором <span className='code-mini'>alertLink</span>)</p>
            <div className="code">
                {"<a href=\"https://t.me/+I7VeJtnyLN8xNDFk\" onclick=\"alertLink\">"}
                Удалить
                {"</a>"}<br/>
                {"<!--"}но у нас это не будет работать, сами про тестируйте на своем документ HTML, иза этого там конопка удлаить сразу будет делать своё дестивие{"-->"}<br/>
                {"<!--"}а ты в этом коде нашел что-то не так в нём?{"-->"}
            </div>
            <br />
            <p>приведённого примера может являться, например, следующий фрагмент JavaScript:</p>
            <br />
            <div className="code">
            window.addEventListener('load', () {"=>"} {"{"}<br/>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const linkWithAlert = document.getElementById('alertLink');<br/>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkWithAlert.addEventListener('click', async (evt) {"=>"} {"{"}<br/>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evt.preventDefault();<br/>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (confirm('Вы уверены?')) {"{"}<br/>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await fetch('delete', {"{"} method: 'DELETE' {"}"});<br/>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"}"}<br/>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"}"});<br/>
            {"}"});
            </div>
            <br/><br/>
            <h4>Вынесение в отдельный файл</h4>
            <p>Есть и третья возможность подключения JavaScript — написать скрипт в отдельном файле, а потом подключить его с помощью конструкции</p>
            <br/>
            <div className="code">
            {"<body>"}<br/>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"<script type=\"application/javascript\" src=\"http://Путь_к_файлу_со_скриптом\">"}<br/>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"</script>"}<br/>
            {"</body>"}
            </div>
            <br /><br />
            <h4>Атрибуты элемента script</h4>
            <p>Элемент script, широко используемый для подключения к странице JavaScript, имеет несколько атрибутов.</p>
            <ul className="list">
                <li>необязательный[Спецификация 8] атрибут type для указания MIME-типа содержимого.<br/></li>
                <div className="author-speak">
                    <div className="author">В рабочем предложении RFC-4329, определяющем[54] MIME-тип, соответствующий JavaScript, указано:</div>
                    <div className="en">Use of the "text" top-level type for this kind of content is known to be problematic. This document thus defines text/javascript and text/ecmascript but marks them as "obsolete". Use of experimental and unregistered media types, as listed in part above, is discouraged.<br/>
                    The media types,
                    <ul className="in-list">
                        <li>application/javascript</li>
                        <li>application/ecmascript</li>
                    </ul>
                    <br/>
                    which are also defined in this document, are intended for common use and should be used instead.</div>
                    <div className="ru">Медиатипы<br/>
                    <ul className="list">
                        <li>application/javascript</li>
                        <li>application/ecmascript</li>
                    </ul>
                    <br/>
                    которые также определяются в этом документе, предназначены для практического использования, им следует отдавать предпочтение.</div>
                </div>
                <li>необязательный атрибут <span className="code-mini">src</span>, принимающий в качестве значения адрес к файлу со скриптом.</li>
                <li>необязательный атрибут <span className="code-mini">charset</span>, используемый вместе с <span className="code-mini">src</span> для указания используемой кодировки внешнего файла.</li>
                <li>необязательный атрибут <span className="code-mini">defer</span> указывает, что получение скрипта происходит асинхронно, но выполнение следует отложить до тех пор, пока страница не будет загружена целиком.</li>
                <li>необязательный атрибут <span className="code-mini">async</span> указывает, что получение скрипта происходит асинхронно, а выполнение будет произведено сразу по завершении скачивания. Очерёдность выполнения скриптов не гарантируется.</li>
            </ul>
            <br/>
            <p>При этом атрибут <span className="code-mini">language</span> (<span className='code-mini'>language="JavaScript"</span>), несмотря на его активное использование (в 2008 году этот атрибут был наиболее часто используемым у тега <span className='code-mini'>{"<script>"}</span>), относится к не рекомендуемым (<span className='code-mini'>deprecated</span>), отсутствует в DTD, поэтому считается некорректным</p>
            <br/>
            <h2>Область применения</h2>
            <h3>Веб-приложения</h3>
            <p>JavaScript используется в клиентской части веб-приложений: клиент-серверных программ, в котором клиентом является браузер, а сервером — веб-сервер, имеющих распределённую между сервером и клиентом логику. Обмен информацией в веб-приложениях происходит по сети. Одним из преимуществ такого подхода является тот факт, что клиенты не зависят от конкретной операционной системы пользователя, поэтому веб-приложения являются кроссплатформенными сервисами.</p>
            <br/>
            <h3>AJAX</h3>
            <p>JavaScript используется в AJAX, популярном подходе к построению интерактивных пользовательских интерфейсов веб-приложений, заключающемся в «фоновом» асинхронном обмене данными браузера с веб-сервером. В результате, при обновлении данных веб-страница не перезагружается полностью и интерфейс веб-приложения становится быстрее, чем это происходит при традиционном подходе (без применения AJAX).</p>
            <br/>
            <h3>Comet</h3>
            <p>Comet — широкое понятие, описывающее механизм работы веб-приложений, использующих постоянные HTTP-соединения, что позволяет веб-серверу отправлять данные браузеру без дополнительного запроса со стороны браузера. Для таких приложений используются технологии, непосредственно поддерживаемые браузерами. В частности, в них широко используется JavaScript.</p>
            <br/>
            <h3>Браузерные операционные системы</h3>
            <p>JavaScript широко используется в браузерных операционных системах. Так, например, исходный код IndraDesktop WebOS на 75 % состоит из JavaScript, код браузерной операционной системы IntOS — на 70 %. Доля JavaScript в исходном коде eyeOS — 5 %, однако и в рамках этой операционной системы JavaScript играет важную роль, участвуя в визуализации на клиенте и являясь необходимым механизмом для коммуницирования клиента и сервера.</p>
            <br/>
            <h3>Букмарклеты</h3>
            <p>JavaScript используется для создания небольших программ, размещаемых в закладки браузера. При этом используются URL-адреса со спецификатором <span className="code-mini">javascript:</span> (конечно очень даже старано, это не похоже на Фраза комады в ИИ История?!).</p>
            <br/>
            <h3>Пользовательские скрипты в браузере</h3>
            <p>Пользовательские скрипты в браузере — это программы, написанные на JavaScript, выполняемые в браузере пользователя при загрузке страницы. Они позволяют автоматически заполнять формы, переформатировать страницы, скрывать нежелательное содержимое и встраивать желательное для отображения содержимое, изменять поведение клиентской части веб-приложений, добавлять элементы управления на страницу и т. д.<br/><br/>

            Для управления пользовательскими скриптами в Mozilla Firefox используется расширение Greasemonkey; Opera и Google Chrome предоставляют средства поддержки пользовательских скриптов и возможности для выполнения ряда скриптов Greasemonkey.</p>
            <br/>
            <h3>Серверные приложения</h3>
            <p>Приложения, написанные на JavaScript, могут исполняться на серверах, использующих Java 6 и более поздних версий. Это обстоятельство используется для построения серверных приложений, позволяющих обрабатывать JavaScript на стороне сервера.<br/><br/>

            Помимо Java 6, существует ряд платформ, использующих существующие движки (интерпретаторы) JavaScript для исполнения серверных приложений. (Как правило, речь идёт о повторном использовании движков, ранее созданных для исполнения кода JavaScript в браузерах WWW.)</p>
            <br/>
            <h4 className="center-text">Платформы исполнения серверных приложений на JavaScript</h4>
            <table>
                <tr>
                    <th>Название</th>
                    <th>Используемый движок JavaScript</th>
                    <th>Языки, на которых написан движок и платформа</th>
                    <th>Лицензия</th>
                </tr>
                <tr>
                    <td>Jaxer</td>
                    <td>SpiderMonkey</td>
                    <td>C++, C</td>
                    <td>GPl 3</td>
                </tr>
                <tr>
                    <td>persevere-framework</td>
                    <td>Rhino</td>
                    <td>Java</td>
                    <td>Модифицированная лицензия BSD</td>
                </tr>
                <tr>
                    <td>Helma</td>
                    <td>Rhino</td>
                    <td>Java, JavaScript</td>
                    <td>BSD-подобная Helma License 2.0</td>
                </tr>
                <tr>
                    <td>v8cgi</td>
                    <td>V8</td>
                    <td>C++, JavaScript</td>
                    <td>Лицензия BSD</td>
                </tr>
                <tr>
                    <td>node.js</td>
                    <td>V8</td>
                    <td>C++</td>
                    <td>Лицензия MIT</td>
                </tr>
                <tr>
                    <td>gopherjs</td>
                    <td>Go</td>
                    <td>Go</td>
                    <td>Лицензия BSD</td>
                </tr>
            </table>
            <br />
            <p>JavaScript на стороне сервера используется в проектах Google. Так например, Google Sites допускает подстройку с помощью JavaScript-сценариев, исполняемых движком Rhino.</p>
            <br />
            <h3>Мобильные приложения</h3>
            <p>Перевод мобильных устройств Palm на использование Palm webOS в качестве операционной системы с Mojo SDK в качестве комплекта средств разработки позволил использовать JavaScript в качестве языка разработки мобильных приложений. С десятых годов для разработки мобильных приложений с использованием JavaScript для разных мобильных платформ выпускаются такие фреймворки как Cordova, NativeScript, React Native, Titanium SDK.<br/><br/>

            Учитывая то, что JavaScript используется в таких подвидах мобильных приложений как веб-приложения и гибридные приложения, можно констатировать, что в разработке мобильных приложений в настоящее время данный язык является одним из основных.</p>
            <br/>
            <h3>Виджеты</h3>
            <p>Виджет — вспомогательная мини-программа, графический модуль которой размещается в рабочем пространстве соответствующей родительской программы, служащая для украшения рабочего пространства, развлечения, решения отдельных рабочих задач или быстрого получения информации из интернета без помощи веб-браузера. JavaScript используется как для реализации виджетов, так и для реализации движков виджетов. В частности, при помощи JavaScript реализованы Apple Dashboard, Microsoft Gadgets, Yahoo! Widgets, Google Gadgets, Klipfolio Dashboard.</p>
            <br />
            <h3>Прикладное программное обеспечение</h3>
            <p>JavaScript используется для написания прикладного ПО. Например, 16,4 % исходного кода Mozilla Firefox написано на JavaScript.<br/><br/>

            Google Chrome OS в качестве прикладного ПО использует веб-приложения.<br/><br/>

           В окружении рабочего стола GNOME имеется возможность создавать на JavaScript программы, оперирующие с библиотеками GNOME при помощи Gjs, Seed.</p>
            <br />
            <ImageBlock imagePath="/javascript-code.png" textImage="Исходный код и скриншот JavaScript-программы, выполняемой с помощью Seed" imageAlt="JavaScript Coding" />
            <br/>
            <h3>Манипуляция объектами приложений</h3>
            <p>JavaScript также находит применение в качестве скриптового языка доступа к объектам приложений. Платформа Mozilla (XUL/Gecko) использует JavaScript. Среди сторонних продуктов, например, Java, начиная с версии 6, содержит встроенный интерпретатор JavaScript на базе Rhino[63]. Сценарии JavaScript поддерживаются в таких приложениях Adobe, как Adobe Photoshop, Adobe Dreamweaver, Adobe Illustrator и Adobe InDesign.</p>
            <br/>
            <h3>Офисные приложения</h3>
            <p>JavaScript используется в офисных приложениях для автоматизации рутинных действий, написания макросов, организации доступа со стороны веб-служб.</p>
            <br/>
            <h4>Microsoft Office</h4>
            <p>В Excel Services 2010 добавились два новых интерфейса программирования приложений: REST API и JavaScript Object Model (JSOM).</p>
            <br/>
            <ul className="list">
                <li>Excel Services 2010 REST API позволяет осуществлять доступ к объектам рабочих книг, таким как таблицы, диаграммы и именованные серии данных; получать изображения, HTML, Atom, рабочие книги; устанавливать значения и обновлять вычисления перед запрашиванием элементов.</li>
                <li>JSOM даёт возможность реагировать на действия пользователя в отношении Excel Web Access (EWA), программно взаимодействовать с составляющими EWA. Использование JSOM осуществляется при помощи помещения кода JavaScript на страницу, содержащую компоненты EWA.</li>
            </ul>
            <br /><br />
            <h4>OpenOffice.org</h4>
            <p>JavaScript — один из языков программирования, используемых для написания макросов в приложениях, входящих в состав OpenOffice.org. В OpenOffice.org интегрирован интерпретатор JavaScript Rhino. По состоянию на декабрь 2009 года поддержка JavaScript носила ограниченный характер. Ограничения, присущие разработке макросов OpenOffice.org на JavaScript:</p>
            <br/>
            <ul className="list">
                <li>среда выполнения JavaScript поддерживает загрузку лишь тех классов Java, которые развёрнуты сценарием JavaScript;</li>
                <li>среда выполнения JavaScript не предоставляет сообщения об ошибках, произошедших во время выполнения скрипта;</li>
                <li>ещё не реализована поддержка интерактивной разработки JavaScript-сценариев.</li>
            </ul>
            <br />
            <p>В OpenOffice.org имеется редактор и отладчик JavaScript-сценариев.</p>
            <br />
            <h3>Обучение информатике</h3>
            <p>JavaScript обладает пропедевтической ценностью, позволяя сочетать при обучении информатике интенсивную практику программирования и широту используемых технологий. Преподавание данного языка в школе позволяет создать базу для изучения веб-программирования, использовать на уроках творческие проекты. Соответствующий курс позволяет обеспечить углублённый уровень изучения информатики и его имеет смысл включать в элективные курсы углублённого уровня подготовки.<br/><br/>

            JavaScript — подходящий язык для обучения программированию игр. По сравнению с альтернативами, он функционально достаточен, прост в изучении и в применении, снижает сложность для обучения, мотивирует обучаемых делиться своими играми с другими.<br/><br/>

            Не включённые в книгу Николаса Закаса «Professional JavaScript for Web Developers» части о реализации на JavaScript классических алгоритмов, техник, структур данных, послужили началу проекта Computer science in JavaScript.</p>
            <br/>
            <h2>Библиотеки JavaScript</h2>
            <p>Для обеспечения высокого уровня абстракции и достижения приемлемой степени кросс-браузерности, при разработке веб-приложений используются библиотеки JavaScript. Они представляют собой набор многократно используемых объектов и функций. Среди известных JavaScript библиотек можно отметить React.js, Vue.js, Ember.js, Adobe Spry, AngularJS, Svelte[англ.], Dojo, Extjs, jQuery, Mootools, Prototype, Qooxdoo и Underscore.</p>
            <br/>
            <h2>Отладка</h2>
            <p>В JavaScript доступ к отладчикам становится особенно полезным при разработке крупных нетривиальных программ из-за различий в реализациях разных браузеров (в частности, в отношении объектной модели документа). Во многих браузерах есть встроенный отладчик.<br/><br/>

            Internet Explorer имеет три отладчика: Microsoft Visual Studio — самый полный из них, за ним следует Microsoft Script Editor[ (компонент Microsoft Office), и, наконец, свободный Microsoft Script Debugger, гораздо более простой, чем два других. Бесплатный Microsoft Visual Web Developer Express предоставляет ограниченную версию с отладочной функцией JavaScript в Microsoft Visual Studio. В восьмой версии в IE вместе с инструментами для разработчиков появился встроенный отладчик.<br/><br/>

            В Opera также имеется собственный отладчик — Opera Dragonfly.<br/><br/>

            Разрабатываемые веб-приложения в Firefox можно отлаживать при помощи встроенных инструментов Firefox Developer Tools.<br/><br/>

            В Safari входит отладчик JavaScript WebKit Web Inspector. Этот же отладчик доступен и в других браузерах, использующих WebKit: Google Chrome, Arora, Rekonq, Midori и др.</p>
            <br/>
            <h2>Средства тестирования</h2>
            <p>Большинство фреймворков автоматизированного тестирования JavaScript-кода предполагают запуск тестов в браузере. Это осуществляется при помощи HTML-страницы, являющейся контекстом тестирования, которая, в свою очередь загружает всё необходимое для осуществления тестирования. Первыми такими фреймворками были JsUnit (создан в 2001 году), Selenium (создан в 2004 году). Альтернатива — запуск тестов из командной строки. В этом случае используются окружения, отличные от браузера, например, Rhino. Одним из первых инструментов такого рода является Crosscheck, позволяющий тестировать код, эмулируя поведение Internet Explorer 6 и Firefox версий 1.0 и 1.5. Другой пример фреймворка автоматизированного тестирования JavaScript-кода, не использующего браузер для запуска тестов — библиотека env.js, созданная Джоном Резигом. Она использует Rhino и при этом содержит эмуляцию окружения браузера и DOM.<br/><br/>

            Blue Ridge, плагин к фреймворку веб-приложений Ruby on Rails, позволяет осуществлять модульное тестирование JavaScript-кода как в браузере, так и вне его. Это достигается за счёт использования фреймворка автоматизированного тестирования Screw.Unit и Rhino с env.js.<br/><br/>

            Главная проблема систем тестирования, не использующих браузеры, в том, что они используют эмуляции, а не реальные окружения, в которых выполняется код. Это приводит к тому, что успешное прохождение тестов не гарантирует того, что код корректно отработает в браузере. Проблемой систем тестирования, использующих браузер, является сложность работы с ними, необходимость осуществления рутинных неавтоматизированных действий. Для решения этого JsTestDriver, фреймворк автоматизированного тестирования, разрабатываемый Google, использует сервер, взаимодействующий с браузерами для осуществления тестирования. Сходным образом ведёт себя Selenium Remote Control, входящий во фреймворк автоматизированного тестирования Selenium: он включает в себя сервер, запускающий и завершающий браузеры и действующий как HTTP-прокси для запросов к ним. Кроме того, в Selenium содержится Selenium Grid, позволяющий осуществлять одновременное тестирование JavaScript-кода на разных компьютерах с разными окружениями, уменьшая время выполнения тестов. Testswarm, имеющее поддержку фреймворков автоматизированного тестирования JavaScript-кода QUnit (библиотека jQuery), UnitTestJS (библиотека Prototype), JSSpec (библиотека MooTools), JsUnit, Selenium и Dojo Objective Harness, представляет собой распределённое средство поддержки непрерывной интеграции.<br/><br/>

            Негативное свойство, которым может обладать фреймворк автоматизированного тестирования JavaScript-кода — наличие зависимостей. Это создаёт риск отказа в работе тестируемого кода, успешно проходящего тесты, в среде с отсутствием этих зависимостей. Например, исходная версия JsUnitTest, фреймворка, созданного и использовавшегося для тестирования библиотеки Prototype, зависела от самой Prototype, изменяющего свойства объектов в глобальной области видимости. Включение в библиотеку JavaScript инструмента тестирования — распространённая практика. Так YUI Test 3 является частью Yahoo! UI Library и может быть безопасно использован для тестирования произвольного JavaScript-кода. QUnit — фреймворк автоматизированного тестирования, созданный разработчиками jQuery.</p>
            <br/>
            <h2>Безопасность</h2>
            <p>JavaScript позволяет потенциальным авторам вредоносного кода запускать его на любом компьютере сети: для этого достаточно открыть на нём веб-страницу. Это обуславливает наличие двух принципиальных ограничений:</p>
            <br/>
            <ul className="list">
                <li>JavaScript-программы выполняются в песочнице, в которой они могут выполнять только ограниченный круг действий, а не задачи программирования общего назначения (например, создание файлов, работа с сокетами)</li>
                <li>для JavaScript-кода применяется правило ограничения домена, в соответствии с которым скрипт, встроенный в страницу, не может получить доступ к ряду свойств объектов другой страницы (в частности, к большинству свойств объекта <span className='code-mini'>document</span>) при отличии в протоколе, хосте и номере порта этих страниц.</li>
            </ul>
            <br />
            <p>Помимо этого, разработчики браузеров вносят дополнительные ограничения в ответ на имеющие место злоупотребления. Так появился, в частности, запрет на открытие окна, размер одной стороны которого меньше ста пикселей.</p>
            <br />
            <h3>Межсайтовые уязвимости</h3>
            <p>Общая проблема, касающаяся JavaScript — межсайтовый скриптинг или XSS, нарушение правила ограничения домена. Уязвимости XSS имеют место в ситуациях, когда злоумышленник имеет возможность поместить скрипт на страницу, которая показывается пользователю. В этом случае скрипт получает доступ к сайту с правами этого пользователя, что в ряде случаев открывает возможность отсылки конфиденциальной информации, осуществление нежелательных транзакций.<br/><br/>

            Уязвимости XSS также происходят из-за ошибок, допущенных разработчиками браузеров.<br/><br/>

            Другим типом межсайтовой уязвимости является подделка межсайтовых запросов или CSRF. Она заключается в возможности сайта злоумышленника заставить браузер пользователя осуществить нежелательное действие на целевом сайте (например, банковский перевод денег). Такая возможность имеется, если целевой сайт полагается только на HTTP cookie или запросы авторизации. В этом случае запросы, инициализированные кодом сайта злоумышленника выполняются так же как запросы пользователя, если он авторизован на целевом сайте. Одним из средств защиты от CSRF является осуществление аутентификации при любом запросе, который приводит к необратимым последствиям. Также может помочь анализ HTTP referer.</p>
            <br/>
            <h3>Неуместное доверие на стороне клиента</h3>
            <p>Разработчики клиентских приложений, вне зависимости от того, используют они JavaScript или нет, должны осознавать, что последние могут находиться под контролем злоумышленников. Поэтому любая проверка на стороне клиента может быть обойдена, JavaScript может быть как запущен, так и нет. Код, подвергнувшийся обфускации, может стать объектом обратной разработки; данные формы могут быть посланы на сервер, минуя валидацию, осуществляемую с помощью JavaScript; скрипты могут быть отключены частично, поэтому, например, надёжную защиту от сохранения изображений с помощью JavaScript осуществить нельзя; чрезвычайно неосмотрительно внедрять пароль в JavaScript, исполняемый на клиенте, где он может быть найден злоумышленником.</p>
            <br/>
            <h3>Ошибки в браузере, плагинах и расширениях</h3>
            <p>JavaScript предоставляет интерфейс к широкому спектру возможностей браузера, некоторые из которых могут содержать ошибки, приводящие, например, к переполнению буфера. Это позволяет писать скрипты, приводящие к исполнению произвольного кода на пользовательской системе.<br/><br/>

            Подобные ошибки выявлялись у часто используемых браузеров, включая Mozilla Firefox, Internet Explorer, Safari. При выявлении потенциально опасных ошибок в браузере и наличия сведений о реализованных эксплойтах фирма-производитель и эксперты по безопасности рекомендуют отключать JavaScript до выхода патча.<br/><br/>

            Плагины, такие как плееры, Macromedia Flash и ряд ActiveX компонент, доступных по умолчанию в Internet Explorer, могут также содержать ошибки, эксплуатируемые с помощью JavaScript, что уже случалось ранее.<br/><br/>

            Расширения Mozilla Firefox не изолированы друг от друга: одно расширение может исправлять другое, что может использоваться злоумышленниками. На конференции SecurityByte & Owasp AppSec Asia 2009 Роберто Сагги Ливерани (Roberto Suggi Liverani) и Ник Фримэн (Nick Freeman) продемонстрировали три эксплойта в популярных расширениях Firefox, загруженные с сайта более 30 миллионов раз.</p>
            <br/>
            <h3>Ошибки реализации песочницы</h3>
            <p>Браузеры могут запускать JavaScript вне песочницы с привилегиями, необходимыми, например, для создания и удаления файлов. Однако такие привилегии не должны даваться коду из веба.<br/><br/>

            Неправильное наделение привилегиями JavaScript из веба служило причиной уязвимостей как Internet Explorer, так и Mozilla Firefox.<br/><br/>

            Microsoft Windows позволяет файлам с кодом JavaScript запускаться как обычным программам без того, чтобы быть помещёнными в песочницу. Это делает возможным создание троянских программ.</p>
            <br/>
            <h2>Взаимодействие JavaScript с другими языками</h2>
            <p>JavaScript может взаимодействовать с другими языками программирования различными способами. Вот несколько примеров:</p>
            <br/>
            <h3>WebAssembly</h3>
            <p>WebAssembly (Wasm) — это бинарный формат, который позволяет запускать код, написанный на других языках (например, C, C++, Rust), в браузере с производительностью, близкой к нативной. JavaScript может вызывать функции WebAssembly и наоборот.</p>
            <br/>
            <h3>Node.js и C++</h3>
            <p>Node.js позволяет писать серверный код на JavaScript. Для повышения производительности можно использовать нативные аддоны, написанные на C++. Эти аддоны могут быть загружены и использованы в JavaScript-коде.</p>
            <br/>
            <h3>JavaScript и Python</h3>
            <p>Существует несколько способов взаимодействия JavaScript с Python. Например, с помощью библиотеки Pyodide, которая позволяет запускать Python-код в браузере, или через серверные API, где Python-скрипты обрабатывают запросы от JavaScript-клиентов.</p>
            <br/>
            <h3>JavaScript и Java</h3>
            <p>JavaScript может взаимодействовать с Java через различные мосты и библиотеки. Например, Nashorn — это движок JavaScript для JVM, который позволяет запускать JavaScript-код из Java-приложений.</p>
            <br/>
            <h3>JavaScript и PHP</h3>
            <p>JavaScript и PHP часто используются вместе в веб-разработке. JavaScript работает на стороне клиента, а PHP на стороне сервера. Они взаимодействуют через HTTP-запросы, отправляемые JavaScript и обрабатываемые PHP.</p>
        </div>
    </div>
}